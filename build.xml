<project name="dynamide" default="all">
<!-- Copyright (c) 2001 - 2013 DYNAMIDE.COM -->

  <!-- =================================================================== 
   DO NOT CHANGE THIS FILE
         You can change $DYNAMIDE_HOME/dynamide.local.properties instead.
         You can also override values on the Ant command line with "ant -D..."
         These -D parameters win over environment variables.
         
         To see targets in this file, use "ant -projecthelp" 
        =================================================================== -->

    <!-- pull in the User's environment -->
    <property environment="myenv"  />

    <!-- The default DYNAMIDE_HOME.  It is picked up:
      **     1) from the ant command line, e.g. ant -DDYNAMIDE_HOME=/usr/local/dynamide all
      **     2) from the environment variables
      **     3) from the directory where this build.xml lives.
    -->
    <condition property="DYNAMIDE_HOME" value="${basedir}">
          <not>
            <isset property="myenv.DYNAMIDE_HOME"/>
        </not>
    </condition>
    <property name="DYNAMIDE_HOME" value="${myenv.DYNAMIDE_HOME}"/>


    <property name="propsTemplate"   value="${DYNAMIDE_HOME}/bin/dynamide.local.properties.template"/>
    <property name="installedProps"  value="${DYNAMIDE_HOME}/dynamide.local.properties"/>
    <!-- These property files include definitions for:
        DYNAMIDE_LOGS
        DYNAMIDE_BUILD
        DYNAMIDE_RESOURCE_ROOT
        DYNAMIDE_STATIC_ROOT
        DYNAMIDE_CONTEXT_CONF
        DM_TOMCAT_HOME
    -->

  <!-- =================================================================== -->
  <!--            Targets                                                  -->
  <!-- =================================================================== -->

    <target name="all" depends="init,setup,jar,javadoc,static,ROOT,homes,write-properties,install-bin">
    </target>

    <target name="help">
        <echo>
           Targets:

                all            :  Calls all targets required to build and install dynamide.
                                      This is the default target.
                                      Doesn't call "clean".
                check-props    :  Informational: reads property files and shows expanded properties.
                clean          :  Cleans the build/classes and build/lib folders.
                compile        :  Compiles java classes.
                compile-test   :  Compiles java test classes.
                homes          :  Installs required home directories and files inside build/resource_root/ .
                                          Will NOT hose other accounts in dynamide home directory.
                install-bin    :  Installs files into DM_TOMCAT_ROOT .
                javadoc        :  Creates the static javadoc.
                ROOT           :  Creates the default webapp for tomcat.
                                          Push this to tomcat with install-bin .
                zip            :  Creates a zip distribution of all source.

            Once dynamide is up, you can look at the call graph here:
                http://localhost:8080/dynamide/doco/doc/help/FAQ#antCallGraph
            or you can find it in source:
                 src/assemblies/dynamide-apps/apps/doco/resources/images/dynamide-ant-call-graph.jpg
        </echo>
    </target>
    
    <target name="check-os">
        <condition property="osIsDos">
          <or>
           <os family="dos"/>
           <os family="windows"/>
          </or>
        </condition>

        <condition property="osIsUnix">
          <os family="unix"/>
        </condition>
    </target>

    <target name="dos-filenames" depends="check-os" if="osIsDos">
        <property name="dynamide.local.script" value=".dynamide.local.bat" />
        <echo>DOS/Windows</echo>
    </target>

    <target name="unix-filenames" depends="check-os" if="osIsUnix">
        <property name="dynamide.local.script" value=".dynamide.local.sh" />
        <echo>Unix</echo>
    </target>

    <target name="init-properties" depends="unix-filenames,dos-filenames">
        <property file="${installedProps}" />
        
        <!-- turn this "on" for debug symbols (line numbers in bytecode), or "off". -->
        <property name="debug.symbols" value="on" />
        
        <echo>debug.symbols ${debug.symbols}</echo>

        <property name="dynamide.lib" value="${DYNAMIDE_HOME}/lib" />
        
        <property name="buildDir" value="${DYNAMIDE_BUILD}" />
        <property name="buildDirClasses" value="${buildDir}/classes" />
        <property name="buildDirLib" value="${buildDir}/lib" />
        <property name="dynamide.generated.properties.filename" value="${buildDir}/dynamide.generated.properties" />
        <property name="buildDirTomcat" value="${buildDir}/tomcat" />


        <property file="${DYNAMIDE_HOME}/dynamide.version" />
        
        <property name="relative.src.java" value="src/java" />
        <property name="relative.src.java-test" value="src/java-test" />
        <property name="src" value="${DYNAMIDE_HOME}/src" />
        <property name="src.java" value="${DYNAMIDE_HOME}/${relative.src.java}" />
        <property name="src.java-test" value="${DYNAMIDE_HOME}/${relative.src.java-test}" />
        <property name="DYNAMIDE_BUILD_APPS" 
                  value="${DYNAMIDE_RESOURCE_ROOT}/homes/dynamide/assemblies/com-dynamide-apps-1/apps"/>
        <property name="src.homes" value="${DYNAMIDE_HOME}/src/homes-src" />
        <property name="JAVADOCDIR" value="${buildDir}/javadoc"/>
        <property name="JAVADOCDIR_STATIC" value="${DYNAMIDE_STATIC_ROOT}/dynamide/javadoc"/>
        
        <property name="dynamidejar" value="${buildDirLib}/dynamide.jar"/>
        <property name="dynamidewar" value="${buildDir}/dynamide.war"/>
        <property name="PUSH.OVERWRITE" value="no"/>

        <path id="refCLASSPATH">
           <pathelement location="${buildDirClasses}" />
           <fileset dir="${DYNAMIDE_HOME}/lib">
               <include name="*.jar" />
               <include name="*.zip" />
           </fileset>
        </path>
        <property name="propCLASSPATH" refid="refCLASSPATH"/>
    </target>

    <target name="check-props" depends="init-properties">
        <echo>
        myenv.DYNAMIDE_HOME: ${myenv.DYNAMIDE_HOME}
        Ant basedir: ${basedir}
        DYNAMIDE_HOME: ${DYNAMIDE_HOME}
        installedProps: ${installedProps}
        DYNAMIDE_BUILD: ${DYNAMIDE_BUILD}
        DYNAMIDE_RESOURCE_ROOT: ${DYNAMIDE_RESOURCE_ROOT}
        DYNAMIDE_STATIC_ROOT: ${DYNAMIDE_STATIC_ROOT}
        DYNAMIDE_CONTEXT_CONF: ${DYNAMIDE_CONTEXT_CONF}
        DYNAMIDE_LOGS: ${DYNAMIDE_LOGS}
        </echo>
        <echo>See a dump of all ant properties: </echo>
        <echo>        ${dynamide.generated.properties.filename}</echo>
        <echo>        (depends on "write-properties" or "install-bin" tasks)</echo>
    </target>

    <target name="write-properties" depends="check-props">
        <echo>echoproperties to: ${dynamide.generated.properties.filename}</echo>
        <echoproperties destfile="${dynamide.generated.properties.filename}"/>
    </target>

    <target name="init" depends="check-props">
      <mkdir dir="${DYNAMIDE_LOGS}" />
      <mkdir dir="${DYNAMIDE_RESOURCE_ROOT}" />
      <mkdir dir="${DYNAMIDE_RESOURCE_ROOT}/assemblies" />
      <mkdir dir="${buildDirClasses}" />
      <mkdir dir="${JAVADOCDIR}" />
      <mkdir dir="${buildDirLib}" />
      <mkdir dir="${DYNAMIDE_STATIC_ROOT}" />
      <echo>dynamide.version: ${dynamide.version}</echo>
      </target>

    <target name="setup"  depends="init,homes,static-apps">         
    </target>

    <target name="clean" depends="check-props">
      <echo message="cleaning ${buildDir}/classes"/>
      <delete file="${dynamide.generated.properties.filename}" />
      <delete dir="${buildDirLib}" />
      <delete dir="${buildDir}/classes" />
      <mkdir dir="${buildDir}/classes" />
    </target>

    <target name="classpath" depends="init">
      <echo>CLASSPATH: ${propCLASSPATH}</echo>
    </target>
    
    <target name="lib" depends="check-props">
        <copy todir="${buildDirLib}">
            <fileset dir="${dynamide.lib}" includes="**"/>  
         </copy>
         
    </target>
    
    <target name="ROOT" depends="compile,jar">
        <property name="ROOT.dir" value="${buildDirTomcat}/webapps/ROOT" />
        <property name="ROOT.libdir" value="${buildDirTomcat}/webapps/ROOT/WEB-INF/lib" />
        <mkdir dir="${ROOT.dir}" />
        <copy todir="${ROOT.libdir}">
            <fileset dir="${dynamide.lib}" includes="**" excludes="tomcat-7-servlet-api.jar"/>
         </copy>
         <copy verbose="yes" overwrite="yes" file="${dynamidejar}" todir="${ROOT.libdir}"/>
         <copy verbose="yes" overwrite="yes" file="${src}/conf/webapps/ROOT/WEB-INF/web.xml" todir="${ROOT.dir}/WEB-INF"/>
        <antcall target="replaceMacros">
             <param name="replaceMacros.src" value="${buildDirTomcat}/webapps/ROOT/WEB-INF/web.xml"/>
             <param name="replaceMacros.dest" value="${buildDirTomcat}/webapps/ROOT/WEB-INF/web.xml"/>
        </antcall>
        <echo>Wrote web.xml file: ${buildDirTomcat}/webapps/ROOT/WEB-INF/web.xml</echo>
    </target>


    <target name="compile" depends="init,lib">
      <echo message="buildDir: ${buildDirClasses}" />
      <echo></echo>
      <copy overwrite="yes"
          file="${src.java}/com/dynamide/conf/WebMacroDynamide.properties"
          tofile="${buildDirClasses}/com/dynamide/conf/WebMacroDynamide.properties"
          />
      <copy overwrite="yes"
          file="${src.java}/com/dynamide/util/WebMacroTools.properties"
          tofile="${buildDirClasses}/com/dynamide/util/WebMacroTools.properties"
          />
          <echo>file is ${src}/conf/log.conf to ${DYNAMIDE_RESOURCE_ROOT}/conf/log.conf</echo>
      <copy overwrite="yes"
          file="${src}/conf/log.conf"
          tofile="${DYNAMIDE_RESOURCE_ROOT}/conf/log.conf"
          />
      <copy overwrite="yes"
          file="${src}/conf/context.xml"
          tofile="${DYNAMIDE_RESOURCE_ROOT}/conf/context.xml"
          />

      <javac
            debug="${debug.symbols}"
            srcdir="${src.java}"
            destdir="${buildDirClasses}"
            classpath="${propCLASSPATH}"
            includes="com/dynamide/**"
            excludes="com/dynamide/**.hide,com/dynamide/doc/**"
            >
        <!-- for javac 1.5: compilerarg value="-Xlint" /-->
      </javac>
      <echo></echo>
    </target>

    <target name="compile-test" depends="compile,init">
      <echo>Compile the test source, and put it in with the build output, along with the core source.</echo>
      <javac
            debug="${debug.symbols}"
            srcdir="${src.java-test}"
            destdir="${buildDirClasses}"
            classpath="${propCLASSPATH}"
            includes="com/dynamide/**"
            excludes="com/dynamide/**.hide,com/dynamide/doc/**"
      />
    </target>

    <target name="javadoc" depends="javadoc-copy">
    </target>

    <target name="javadoc-copy" depends="javadoc-run">
        <mkdir dir="${JAVADOCDIR_STATIC}" />
        <copy todir="${JAVADOCDIR_STATIC}">
            <fileset dir="${JAVADOCDIR}"/>
        </copy>
        <echo>Installed javadoc in ${JAVADOCDIR_STATIC}</echo>
    </target>

    <target name="javadoc-run" depends="init">
        <mkdir dir="${JAVADOCDIR}"/>
        <javadoc 
                sourcepath="${src.java}"
                destdir="${JAVADOCDIR}"
                classpath="${propCLASSPATH}"
                author="true"
                verbose="false"
                version="true"
                additionalparam="-breakiterator"
                failonerror='true'
                use="true"
                windowtitle="Dynamide API"
                doctitle="&lt;h2&gt;Dyanamide&lt;/h2&gt;&lt;h3&gt;API Specification&lt;/h3&gt;"
                bottom="&lt;i&gt;Copyright &#169; 2001-2013 &lt;a target='_blank' href='http://dynamide.com'>DYNAMIDE.COM&lt;/a>. All Rights Reserved.&lt;i&gt;">

            <packageset dir="${src.java}">
                <include name="**"/>
            </packageset>

            <group title="Core Package" packages="com.dynamide"/>
            <group title="Core Utility Packages" packages="com.dynamide.*" />
            <group title="Test Packages" packages="com.dynamide.test:com.dynamide.test.*"/>
            <group title="Swing IDE Packages" packages="com.dynamide.gui*"/>

            <tag name="dynamide.factorymethod" scope="all" description="&lt;font color='blue'/>Factory Method:&lt;/font>" />
            <tag name="dynamide.keymethod" scope="all" description="&lt;font color='red'/>Key Method:&lt;/font>" />
            <tag name="bug" scope="all" description="Bug:" />
            <tag name="todo" scope="all" description="To do:" />
        </javadoc>
    </target>

    <target name="static-apps" depends="init">
        <echo>DYNAMIDE_STATIC_ROOT:  ${DYNAMIDE_STATIC_ROOT}</echo> 
        <echo>DYNAMIDE_HOME: ${DYNAMIDE_HOME}</echo>

        <copy todir="${DYNAMIDE_STATIC_ROOT}/dynamide/doco">
            <fileset dir="${DYNAMIDE_BUILD_APPS}/doco/resources/images"/>
        </copy>
        <echo>Files copied to ${DYNAMIDE_STATIC_ROOT}/dynamide/doco/images/*</echo>

        <copy todir="${DYNAMIDE_STATIC_ROOT}/dynamide/images">
            <fileset dir="${DYNAMIDE_BUILD_APPS}/doco/resources/images"/>
        </copy>
        <copy overwrite="yes"
              file="${DYNAMIDE_HOME}/src/assemblies/dynamide-lib/resources/images/transparent.gif"
              tofile="${DYNAMIDE_STATIC_ROOT}/dynamide/images/transparent.gif"
              />
        <echo>Files copied to ${DYNAMIDE_STATIC_ROOT}/dynamide/images/transparent.gif</echo>
    </target>

    <target name="static" depends="static-apps,javadoc">
    </target>

    <!-- zip up all the sources, for distribution.
         hoses the dynamide-source-${dynamide.version}.zip file, but preserves previous versions.
    -->
    <target name="dist-src" depends="init">
        <delete file="${buildDir}/dynamide-source-${dynamide.version}.zip" />
        <zip zipfile="${buildDir}/dynamide-source-${dynamide.version}.zip">
             <zipfileset
                     dir="${DYNAMIDE_HOME}"
                     prefix="dynamide"
                     includes="**/*"
                     excludes="build/**,
                        build,
                        logs,
                        out,
                        logs/**,
                        out/**,
                        ${relative.src.java}/com/dynamide/**/*.class,
                        ${relative.src.java}/com/dynamide/doc/3rd/**/*.*,
                        ${relative.src.java}/com/dynamide/doc/internal/3rd/**/*.*,
                        ${relative.src.java}/com/dynamide/doc/internal/ndas/**/*.*,
                        **/*.dfPackage,
                        **/*.zip,
                        **/*.jar,
                        **/*.war,
                        **/*.exe,
                        **/*.tag"
                     />
        </zip>
    </target>

    <target name="dist-lib" depends="init">
        <zip zipfile="${buildDir}/dynamide-lib-3rd-${dynamide.version}.zip"
            basedir="${DYNAMIDE_HOME}/"
            includes="lib/**/*.jar,lib/**/*.zip,lib/**/*.TXT"
        />
    </target>

    <!-- Create a full distribution.
    TODO.  Make this do something other than what it does now, which is replicates dist-src
    -->
    <target name="dist" depends="init,jar">
        <property name="zipfile" value="${buildDir}/dynamide.${dynamide.version}.zip"/>
        <delete file="${zipfile}" />
        <echo>dist is using DYNAMIDE_HOME: ${DYNAMIDE_HOME}</echo>
        <zip zipfile="${zipfile}">
            <zipfileset
              dir="${DYNAMIDE_HOME}/"
              prefix="dynamide"
                includes="**/*"
                 excludes="${buildDirClasses}/**/*.class,
                          doc/internal/**/*.*,
                          doc/3rd/**/*.*,
                          build,
                          build/**,
                          out,
                          out/**,
                          logs,
                          logs/**,
                          **/*.dfPackage,
                          **/*.tag,
                          **/*.map,
                          **/*.mep,
                          **/*.men,
                          **/*.zip,
                          **/*.war,
                          **/*.exe,
                          **/*.tag
                          "
                          />
        </zip>
        <echo>Zipfile: ${zipfile}</echo>
    </target>

  <target name="jar" depends="init,compile,lib">
    <delete file="${dynamidejar}" />
      <echo>basedir:${buildDirClasses} </echo>
      <echo>dynamidejar:${dynamidejar} </echo>
    <jar
         jarfile="${dynamidejar}"
         basedir="${buildDirClasses}"
         includes="com/dynamide/**/*.class,com/dynamide/**/*.properties"
         excludes="com/dynamide/**/*.java,**/*.zip,**/*.exe,**/*.tag,dynamide.jar,**/*.war,com/dynamide/doc/**/*.*,com/dynamide/lib/*.*"
         />
  </target>

  <target name="homes" depends="init">
      <echo>src.homes: ${src.homes}</echo>
      <copy toDir="${DYNAMIDE_RESOURCE_ROOT}/homes">
          <fileset dir="${src.homes}" />
      </copy>
      <copy verbose="true" toDir="${DYNAMIDE_RESOURCE_ROOT}/homes/dynamide/assemblies/com-dynamide-apps-1">
          <fileset dir="${DYNAMIDE_HOME}/src/assemblies/dynamide-apps" />
      </copy>
      <copy toDir="${DYNAMIDE_RESOURCE_ROOT}/homes/dynamide/assemblies/com-dynamide-test-suite-1">
          <fileset dir="${DYNAMIDE_HOME}/src/assemblies/dynamide-test-suite" />
      </copy>
      <copy toDir="${DYNAMIDE_RESOURCE_ROOT}/assemblies/com-dynamide-lib-1">
          <fileset dir="${DYNAMIDE_HOME}/src/assemblies/dynamide-lib" />
      </copy>
  </target>


  <!-- =================================================================== -->
  <!--     Installation Targets                                                   -->
  <!-- =================================================================== -->

  <target name="install-bin" depends="init,ROOT">
        <property name="dynamidelocalsh" value="${DYNAMIDE_HOME}/bin/${dynamide.local.script}"/>
        <antcall target="replaceMacros">
             <param name="replaceMacros.src" value="${dynamidelocalsh}.template"/>
             <param name="replaceMacros.dest" value="${dynamidelocalsh}"/>
        </antcall>
        <echo>Created source-able script in "${dynamidelocalsh}"</echo>


        <copy overwrite="no"
              verbose="yes"
              file="${DYNAMIDE_HOME}/bin/.webmacroshell"
              tofile="${user.home}/.webmacroshell" />

        <echo></echo>
        <copy overwrite="no"
              verbose="yes"
              file="${DYNAMIDE_HOME}/bin/.webmacroshell.basescript"
              tofile="${user.home}/.webmacroshell.basescript" />

        <echoproperties destfile="${dynamide.generated.properties.filename}"/>
        <echo>Wrote ${dynamide.generated.properties.filename}</echo>

        <property name="server.xml.src.filename" value="${src}/conf/tomcat/template.server-fragment.xml" />
        <property name="server.xml.dest.filename" value="${buildDirTomcat}/conf/server-fragment.xml" />
        <antcall target="replaceMacros">
             <param name="replaceMacros.src" value="${server.xml.src.filename}"/>
             <param name="replaceMacros.dest" value="${server.xml.dest.filename}"/>
        </antcall>
        <echo>This file has a Host element that can be inserted into TOMCAT/conf/server.xml </echo>
        <echo>Filename: ${server.xml.dest.filename}</echo>

      <property name="ROOT.xml.src.filename" value="${src}/conf/tomcat/template.context.ROOT.xml" />
      <property name="ROOT.xml.dest.filename" value="${buildDirTomcat}/conf/Catalina/localhost/ROOT.xml" />
       <antcall target="replaceMacros">
             <param name="replaceMacros.src" value="${ROOT.xml.src.filename}"/>
             <param name="replaceMacros.dest" value="${ROOT.xml.dest.filename}"/>
        </antcall>

      <property name="static.xml.src.filename" value="${src}/conf/tomcat/template.context.static.xml" />
      <property name="static.xml.dest.filename" value="${buildDirTomcat}/conf/Catalina/localhost/static.xml" />
      <antcall target="replaceMacros">
             <param name="replaceMacros.src" value="${static.xml.src.filename}"/>
             <param name="replaceMacros.dest" value="${static.xml.dest.filename}"/>
        </antcall>

      <available file="${DM_TOMCAT_HOME}/conf" type="dir" property="tomcat_home.present"/>
      <antcall target="install-to-tomcat">
      </antcall>
  </target>

    <target name="check-DM_TOMCAT_HOME" unless="tomcat_home.present">
        <echo>  ==============================</echo>
        <echo>       WARNING: </echo>
        <echo>             DM_TOMCAT_HOME should be set in ${DYNAMIDE_HOME}/dynamide.local.properties</echo>
        <echo>             Since it is not set, no configuration files from ${buildDirTomcat} will be installed.</echo>
        <echo>  ==============================</echo>
    </target>

    <target name="install-to-tomcat" if="tomcat_home.present" depends="check-DM_TOMCAT_HOME" >
        <echo>DM_TOMCAT_HOME=${DM_TOMCAT_HOME}</echo>
        <copy overwrite="yes"
              verbose="no"
              file="${static.xml.dest.filename}"
              todir="${DM_TOMCAT_HOME}/conf/Catalina/localhost/"/>
        <copy overwrite="yes"
              verbose="no"
              file="${ROOT.xml.dest.filename}"
              todir="${DM_TOMCAT_HOME}/conf/Catalina/localhost/"/>
        <echo></echo>
        <echo></echo>
        <echo>These files</echo>
        <echo>    ${ROOT.xml.dest.filename}</echo>
        <echo>    ${static.xml.dest.filename}</echo>
        <echo>Have been installed to:</echo>
        <echo>    ${DM_TOMCAT_HOME}/conf/Catalina/localhost/</echo>
        <echo>Alternatively, you can manually modify </echo>
        <echo>    ${DM_TOMCAT_HOME}/conf/server.xml</echo>
        <echo>with the changes here:</echo>
        <echo>    ${server.xml.dest.filename}</echo>
    </target>


    <target name="replaceMacros">
        <copy overwrite="yes"
              verbose="false"
              file="${replaceMacros.src}"
              tofile="${replaceMacros.dest}"
                />
        <replace file="${replaceMacros.dest}" value="${DYNAMIDE_HOME}">
            <replacetoken expandProperties="false"><![CDATA[${DYNAMIDE_HOME}]]></replacetoken>
        </replace>
        <replace file="${replaceMacros.dest}" value="${DYNAMIDE_BUILD}">
            <replacetoken expandProperties="false"><![CDATA[${DYNAMIDE_BUILD}]]></replacetoken>
        </replace>
        <replace file="${replaceMacros.dest}" value="${DYNAMIDE_RESOURCE_ROOT}">
            <replacetoken expandProperties="false"><![CDATA[${DYNAMIDE_RESOURCE_ROOT}]]></replacetoken>
        </replace>
        <replace file="${replaceMacros.dest}" value="${DYNAMIDE_STATIC_ROOT}">
            <replacetoken expandProperties="false"><![CDATA[${DYNAMIDE_STATIC_ROOT}]]></replacetoken>
        </replace>
        <replace file="${replaceMacros.dest}" value="${DYNAMIDE_CONTEXT_CONF}">
            <replacetoken expandProperties="false"><![CDATA[${DYNAMIDE_CONTEXT_CONF}]]></replacetoken>
        </replace>
        <replace file="${replaceMacros.dest}" value="${DYNAMIDE_LOGS}">
            <replacetoken expandProperties="false"><![CDATA[${DYNAMIDE_LOGS}]]></replacetoken>
        </replace>
        <replace file="${replaceMacros.dest}" value="${DM_TOMCAT_HOME}">
            <replacetoken expandProperties="false"><![CDATA[${DM_TOMCAT_HOME}]]></replacetoken>
        </replace>
        <echo>Expanded macros in file: ${replaceMacros.dest}</echo>
        <!--
        <echo>Contents:</echo>
        <concat>
            <fileset file="${replaceMacros.dest}"/>
        </concat>
        -->
    </target>

    <!-- =================================================================== -->
  <!--     JUnit testing                                                   -->
  <!-- =================================================================== -->

  <target name="test" depends="compile-test">
    <mkdir dir="${buildDir}/test-results/xml"/>
    <junit printsummary="yes" haltonfailure="no" showoutput="yes">
      <!-- formatter type is one of: xml, plain, brief -->
      <formatter type="xml"/>

      <classpath>
        <pathelement path="${propCLASSPATH}" />
      </classpath>

      <sysproperty key="DYNAMIDE_HOME" value="${DYNAMIDE_HOME}" />

      <batchtest fork="yes" todir="${buildDir}/test-results/xml">
        <fileset dir="${src.java-test}">
          <include name="**/*Test.java" />
          <exclude name="**/AllTests.java,**/Abstract*.java,**/SessionTest.java,**/WebmacroTest.java" />
        </fileset>
      </batchtest>

    </junit>
  </target>


  <target name="test-session" depends="compile-test">
    <junit printsummary="yes" haltonfailure="no" showoutput="no">
      <formatter type="brief" usefile="false"/>
      <classpath>
        <pathelement path="${propCLASSPATH}" />
      </classpath>
      <sysproperty key="DYNAMIDE_RESOURCE_ROOT" value="${DYNAMIDE_RESOURCE_ROOT}" />
      <sysproperty key="DYNAMIDE_HOME" value="${DYNAMIDE_HOME}" />
      <test fork="yes" name="com.dynamide.SessionTest"/>
    </junit>
  </target>

  <target name="test-security" depends="compile-test">
    <junit printsummary="yes" haltonfailure="no" showoutput="no">
      <formatter type="plain" usefile="false"/>
      <classpath>
        <pathelement path="${propCLASSPATH}" />
      </classpath>
      <sysproperty key="DYNAMIDE_RESOURCE_ROOT" value="${DYNAMIDE_RESOURCE_ROOT}" />
      <test fork="yes" name="com.dynamide.security.DynamideSecurityManagerTest"/>
    </junit>
  </target>

  <target name="test-filetools" depends="compile-test">
    <junit printsummary="yes" haltonfailure="no" showoutput="yes">
      <formatter type="plain" usefile="false"/>
      <classpath>
        <pathelement path="${propCLASSPATH}" />
      </classpath>
      <sysproperty key="DYNAMIDE_RESOURCE_ROOT" value="${DYNAMIDE_RESOURCE_ROOT}" />
      <sysproperty key="DYNAMIDE_HOME" value="${DYNAMIDE_HOME}" />
      <test fork="yes" name="com.dynamide.util.FileToolsTest"/>
    </junit>
  </target>

  <target name="test-report" depends="test">
    <mkdir dir="${buildDir}/test-results"/>
    <junitreport todir="${buildDir}/test-results">
      <fileset dir="${buildDir}/test-results/xml">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${buildDir}/test-results/html"/>
    </junitreport>
    <echo>See ${buildDir}/test-results/html</echo>
  </target>

  <target name="experimental" depends="check-props">
      <ant antfile="${DYNAMIDE_HOME}/build-experimental.xml"
             dir="${DYNAMIDE_HOME}"
             target="info" />
   </target>

  <target name="sync" depends="check-props">
      <ant antfile="${DYNAMIDE_HOME}/build-sync.xml"
             dir="${DYNAMIDE_HOME}"
             target="sync-all" />
   </target>

</project>
