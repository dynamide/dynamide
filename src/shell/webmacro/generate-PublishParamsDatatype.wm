#macro nothing(){
## This example shows how to generate com.dynamide.Datatype implementations
## from simple inputs.  This is to save typing, but is more powerful
## than, say Multi-Edit templates or macros.
## Example:
## webmacro -noInit -o C:\dynamide\src\java\com\dynamide\datatypes\PublishParamsDatatype.java C:\dynamide\src\shell\webmacro\generate-PublishParamsDatatype.wm
## or
## webmacro -noInit -o %DYNAMIDE_HOME%\src\java\com\dynamide\datatypes\PublishParamsDatatype.java %DYNAMIDE_HOME%\src\shell\webmacro\generate-PublishParamsDatatype.wm
}
#macro t1($key,$indent){
$(indent)Element $(key)El = new Element("$key");
$(indent)$(key)El.addContent(getAsStored("$key"));
$(indent)container.addContent($(key)El);
}
#macro generate($list,$classname,$superclass){
#set $classJavadocSentence = "A datatype to encapsulate all the parameters required to publish a Dynamide application. "
#set $classJavadocSentence = "$classJavadocSentence Publishing is saving the dynamic application as a static set of web pages."
#set $StringTools = $shell.loadClass("com.dynamide.util.StringTools")
package com.dynamide.datatypes;
/*       WARNING                                          *
 *                                                        *
 *                                                        *
 *                                                        *
 *                                                        *
 *                                                        *
 * This file was generated by                             *
 *  /dynamide/src/shell/webmacro/generate-datatype.wm     *
 *                                                        *
 * For example:
 *  webmacro -o %DYNAMIDE_HOME%\src\java\com\dynamide\datatypes\PublishParamsDatatype.java %DYNAMIDE_HOME%\src\shell\webmacro\generate-PublishParamsDatatype.wm
 */
// IGNORING: String pagePublishOutputDir = publishOutputDir;

import org.jdom.*;

import com.dynamide.DynamideObject;
import com.dynamide.JDOMFile;
import com.dynamide.Session;

import com.dynamide.datatypes.Datatype;
import com.dynamide.datatypes.ValidationResult;

/*  Implementation note:
    Sample properties element:
    <property name="publishParams">
      <datatype>com.dynamide.datatypes.PublishParamsDatatype</datatype>
      <value>

#foreach $thing in $list {
        <$thing></$thing>
}
      </value>
    </property>
   </p>
*/


/** $classJavadocSentence
 * <p>Defines the following elements:
    <ul>

#foreach $thing in $list {
    <li>$thing</li>
}
    </ul>
   </p>
   <p>Sample properties element:
<pre>    &lt;property name="publishParams">
      &lt;datatype>com.dynamide.datatypes.PublishParamsDatatype&lt;/datatype>
      &lt;value>

#foreach $thing in $list {
        &lt;$thing>&lt;/$thing>
}
      &lt;/value>
    &lt;/property></pre>
   </p>

 */
public class $classname extends $superclass \{
    public $classname ()\{
        super();
        //System.out.println("$classname constructor");
    \}


    public $(classname)(DynamideObject owner, Session session)\{
        super(owner, session);
        //System.out.println("$classname constructor(owner,session)");
    \}
##this example uses inline code :
    public void init(Element element, String ownerID)\{

#foreach $thing in $list {
        set("$thing", JDOMFile.safeGetElementChildText(element, "$thing"));
}
        //System.out.println("$(classname).init: "+toString());
    \}


##this example uses macro:
#set $indent = "        "
    public void addXMLContentTo(Element container)\{

#foreach $thing in $list {
        #t1($thing, $indent)
}
    \}


#foreach $thing in $list {
    public String get$StringTools.upperCaseFirstLetter($thing)()\{return get("$thing").toString();\}
    public void set$StringTools.upperCaseFirstLetter($thing)(String val)\{set("$thing", val);\}

}

    public String toString()\{
        return "\{$classname: "

#set $sep = ""
#foreach $thing in $list {
              +"$sep$thing="+getAsStored("$thing")
              #if ($sep==""){#set $sep="; "}

}
              +"\}";
    \}

    public ValidationResult validate()\{
        return new ValidationResult(true);//always OK
    \}

\}
}
#set $list = ["URL", "URIPrefix", "outputDir", "protocolHostPort", "defaultExtension", "publishPagesList", "hideApplicationPath", "skipResourcesCopy"]
#set $classname = "PublishParamsDatatype"
#set $superclass = "com.dynamide.datatypes.Datatype"
#generate($list,$classname,$superclass)