<?xml version="1.0"?>
<!DOCTYPE dynamideForm>
<!-- Copyright (c) 2001, 2002 DYNAMIDE.COM -->

<widget>
    <componentHelp>
    <p> Set the xml and xsl properties to files within your assembly's search
    path, using relative names.  Set the expandResult property to "true" if
    you need to have the resulting xml expanded in the Dynamide Session context, that
    is, if you need things like \$SESSION.
    </p>
    <p>If you wish to grab any elements from the DOM of the XML file, hook the onParsed
    event.  This event occurs before rendering, but after the entire XML document has been loaded.
    After the XML has been rendered using the XSL, both source files are garbage collected.
    </p>
    </componentHelp>

    <properties>
        <property name="border">
            <defaultValue>0</defaultValue>
        </property>
        <property name="cache">
           <datatype>com.dynamide.datatypes.Enumeration</datatype>
           <defaultValue>
                <enumeration defaultIndex='0'>
                    <value>off</value>
                    <value>inSession</value>
                    <value>inApplication</value>
                </enumeration>
            </defaultValue>
        </property>
        <property name="enabled">
            <defaultValue>true</defaultValue>
            <datatype>boolean</datatype>
        </property>
        <property name="expandResult">
            <defaultValue>false</defaultValue>
            <datatype>boolean</datatype>
        </property>
        <property name="name">
            <defaultValue>xmltopic</defaultValue>
        </property>
        <property name="topicTitle">
            <defaultValue></defaultValue>
        </property>
        <property name="type">
            <defaultValue>com.dynamide.xmltopic</defaultValue>
            <readOnly>true</readOnly>
        </property>
        <property name="visible">
            <defaultValue>true</defaultValue>
            <datatype>boolean</datatype>
        </property>
        <property name="width">
            <defaultValue>100%</defaultValue>
        </property>
        <property name="height">
            <defaultValue>25</defaultValue>
        </property>
        <property name="xml">
            <defaultValue></defaultValue>
        </property>
        <property name="xmlDefault">
            <defaultValue></defaultValue>
        </property>
        <property name="xmlPageID">
            <defaultValue></defaultValue>
            <helpTip>Set this when you set the xml property to keep a linkstrip in sync, if you point the
            linkstrip's targetID at this component, for example: linkstrip.targetID == "mainPage.xmltopic1.xmlPageID"</helpTip>
        </property>
        <property name="xsl">
            <defaultValue></defaultValue>
        </property>
        <property name="xslDefault">
            <defaultValue></defaultValue>
        </property>

    </properties>

  <event language="beanshell" name="com_dynamide_xmltopic_onImport"><![CDATA[
        import org.jdom.Element;

        import com.icl.saxon.*;

        import java.io.*;

        import com.dynamide.*;
        import com.dynamide.util.*;
        import com.dynamide.resource.*;
        import com.dynamide.xsl.*;
        import com.dynamide.event.ScriptEvent;
        import com.dynamide.datatypes.*;

        void xmltopic_navigate(String targetPageID){
            if (targetPageID.length()>0){
                System.out.println("in xmltopic_navigate::"+targetPageID);
                Widget thisWidget = event.sender;

                String xslSheet = FileTools.joinURI("resources/",targetPageID) + ".xsl";  // for example: "resources/doc/help/glossary.xsl";
                String xslfilename = event.session.findAppFilename(xslSheet);

                if (     (xslfilename != null)
                      && (!xslfilename.startsWith("ERROR"))
                      && (FileTools.fileExists(xslfilename))) {
                    thisWidget.setProperty("xsl", FileTools.joinURI("resources",targetPageID)+".xsl"); //set the "xml" property of the widget.
                } else {
                    thisWidget.setProperty("xsl", session.getString("defaultXSL"));
                }

                String title = "";
                String xml = FileTools.joinURI("resources/",targetPageID)+".xml";
                String xmlfilename = event.session.findAppFilename(xml);
                boolean fileOK = FileTools.fileExists(xmlfilename);
                if (!fileOK){
                   xml = thisWidget.get("xmlDefault");
                   targetPageID = StringTools.substring(xml.replace('\\', '/'), "resources/", ".xml");
                   //xml = FileTools.joinURI("resources/",xml)+".xml";
                   xmlfilename = event.session.findAppFilename(xml);
                   fileOK = FileTools.fileExists(xmlfilename);
                }
                thisWidget.setProperty("xml", xml); //set the "xml" property of the widget.
                thisWidget.setProperty("xmlPageID", targetPageID); //set the targetPageID property of the widget so that it can interact with the linkstrips.
                if ( fileOK && (!xmlfilename.startsWith("ERROR")) ) {
                    try {
                        jdf = new com.dynamide.JDOMFile(null, xmlfilename);
                        title = jdf.getRootElement().getAttributeValue("pageTitle");
                    } catch  (Exception e){
                        title = "ERROR";
                    }
                    if (title == null || title.length()==0){
                        String psv = thisWidget.getPropertyStringValue("autoTitleFromTopicID");
                        if (Tools.isTrue(psv)) {
                            title = targetPageID;
                        } else {
                            title = "";
                        }
                        System.out.println("++++++++++++++ title: "+title);

                    }
                } else {
                    title = "File not found: "+ targetPageID;
                }
                thisWidget.setProperty("topicTitle", title); //event.session.find("main").setProperty("title", title);
                //event.session.logDebug("xmltopic.topicTitle: "+title);
            }
        }
  ]]></event>

  <event language="beanshell" name="navigate">
  <![CDATA[
    xmltopic_navigate(event.inputObject);
  ]]></event>

  <event language="beanshell" name="com_dynamide_xmltopic_onTransform">
  <![CDATA[
        try {
            Widget thisWidget = event.sender;

            //event.session.setStdoutEcho(true);
            //System.out.println("sender: "+event.sender);

            String xml = event.sender.get("xml");
            xml = (xml != null && xml.length() >0) ? xml : event.sender.get("xmlDefault");

            String xsl = event.sender.get("xsl");
            xsl = (xsl != null && xsl.length() >0) ? xsl : event.sender.get("xslDefault");

            String cache = thisWidget.getPropertyStringValue("cache");
            System.out.println("~~~~~ xmltopic  cache: "+cache);
            boolean applicationSharedCache = false; //if false, is per-session, otherwise per-application
            boolean bcache = false;

            if (cache.equals("off")){
                bcache = false;
            } else if (cache.equals("inSession")) {
                bcache = true;
                applicationSharedCache = false;
            } else if (cache.equals("inApplication")){
                applicationSharedCache = true;
                bcache = true;
            }

            if (bcache){
                content = session.getContentFromCache(xml, applicationSharedCache);
                if ( content != null ) {
                    event.resultSrc = content; //should call toString, or see if IContext is binary, except that we put it
                                               // there ourselves, so we know it is an xhtml String.
                    System.out.println("===========USING content from cache: "+xml+" ctx: "+session.getFromCache(xml, applicationSharedCache));
                    return;
                }
            }

            /*String cachePrefix;
            if (session.isPoolable()){
                cachePrefix = "cache:"+session.getApplicationPath();
            } else {
                cachePrefix = "cache:"+session.toString();
            }
            rm = session.getResourceManager();
            rm.findOrCreateCache(cachePrefix, cachePrefix);
            IContext ctx = rm.getCachedResource(cachePrefix, xml);
            if ( ctx != null ) {
                event.resultSrc = ctx.getAttribute(Assembly.CONTENT);
                System.out.println("===========USING ctx: "+ctx.dumpContext(false));
                return;
            } else {
                ctx = new ContextNode(xml);
                System.out.println("=========== ctx: "+ctx.dumpContext(false));
            } */

            String xmlname = event.session.findAppFilename(xml);
            String xslname = event.session.findAppFilename(xsl);
            if ( xmlname == null ) {
                event.returnSource("xml name was not found: "+xml);
                event.prettyPrint = false;
            } else if ( xslname == null ) {
                event.returnSource("xsl name was not found: "+xsl);
                event.prettyPrint = false;
            } else {
                //event.println("xmlname: "+xmlname);
                //event.println("xslname: "+xslname);
                StringList expansionVariables = new StringList();


                //if event source exists:
                jdf = new com.dynamide.JDOMFile(null, xmlname);
                Property jdfProperty = new Property(event.sender);
                jdfProperty.setValue(jdf);
                event.sender.setProperty("sourceJDOMFile", jdfProperty);
                //This should fire an event, not a method, pluggable by the app programmer:
                event.session.fireWidgetMethod(event.sender, "com_dynamide_xmltopic_onSourceLoaded");

                //Now fire an event, not a method, pluggable by the app programmer, that lets them load variables prior to page expansion:
                ScriptEvent resultEvent = event.session.fireWidgetMethod(event.sender, "com_dynamide_xmltopic_onSetVariables");
                if (resultEvent.resultCode == ScriptEvent.RC_OK){
                    //event.println("resultEvent: "+resultEvent);
                    StringList sl2 = (StringList)resultEvent.outputObject;
                    expansionVariables.add(sl2);
                }

                st = new com.dynamide.xsl.SaxonJDOMTransform();
                boolean useJDOM = false;
                boolean useDynamideSaxonController = true;
                event.resultSrc = st.transform(xmlname, xslname, event.session, useDynamideSaxonController, useJDOM);

                if (event.sender.getPropertyStringValue("expandResult").equals("true")){
                    event.resultSrc = event.session.expandTemplate(expansionVariables, event.resultSrc, "com.dynamide.xsl-expanding::"+xmlname+"::"+xslname);
                }

                if (bcache){
                    IContext ctxres = session.putInCache(xml, event.resultSrc, applicationSharedCache);
                    System.out.println("================ com.dynamide.xmltopic generating cached resource: "+xml+" ctx: "+ctxres);
                }
            }
        } catch (Exception e){
            String msg = StringTools.escape(Tools.errorToString(e, true));
            event.resultSrc = "ERROR: (See Session Console Log) <pre>"+msg+"</pre>";
            event.println(msg);
            event.prettyPrint = false;
        }
  ]]>
  </event>

 <!--
  <event language="beanshell" name="com_dynamide_xmltopic_onSourceLoaded">
  <![CDATA[
    event.println("in com_dynamide_xmltopic_onSourceLoaded");
    jdom = event.sender.getProperty("sourceJDOMFile");
    event.println("sourceJDOMFile: "+jdom);
  ]]>
  </event>
  -->

  <event language="beanshell" name="com_dynamide_xmltopic_onSetVariables">
  <![CDATA[
    //Contract: if you find variables you would like to expand in the page, return a StringList of values.
    jdom = event.sender.getProperty("sourceJDOMFile").getValue();
    sl = new StringList();
    // do what ya like...
    //sl.addObject("title", title);
    event.setOutputObject(sl);
    return;
  ]]>
  </event>


    <htmlsrc browser="*"><![CDATA[
        #set $event = $session.fireWidgetMethod($widget, "com_dynamide_xmltopic_onTransform")
        $event.resultSrc
    ]]></htmlsrc>
</widget>