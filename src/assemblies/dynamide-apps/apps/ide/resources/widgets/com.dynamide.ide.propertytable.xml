<?xml version="1.0"?>
<!DOCTYPE dynamideForm>
<!-- Copyright (c) 2001, 2002 DYNAMIDE.COM -->
<widget>
    <properties>
        <property name="type"><defaultValue>com.dynamide.ide.propertytable</defaultValue><readOnly>true</readOnly></property>
        <property name="name"><defaultValue>propertytable</defaultValue></property>
    </properties>

<htmlsrc browser="*"><![CDATA[
    #set $subsessionID = $session.getQueryParam("SUBSESSIONID")

    <script language="javascript">
    <!--

    function currentWidgetChanged(theSelect, targetPageID){
        location = "?next=inspector&SESSIONID=$SESSIONID&widgetID="+theSelect.options[theSelect.selectedIndex].text
                   +'&targetPageID='+targetPageID+'&SUBSESSIONID=$subsessionID';
    }

    /* You can use this function with something like this:
     *    input type="text" name="inputCaption" value="" onkeydown="widgetPropInputOnkeydown(this);"
     */
     function widgetPropInputOnkeydown(theInput, widgetID, targetPageID, callerID){
        //note: "event" is magically defined, so don't define it or you shadow it.
        if (event.keyCode == 13){
            //6/18/2002 3:28PM
            // OK, this is annoying, since hitting the enter key causes focus loss, but it prevents the double-POST
            //  that results when you call widgetPropInputChanged from here, since that proc calls blur,
            //  which makes the onchange event fire, which calls widgetPropInputChanged again.
            theInput.blur(); //cause the onchange event to fire.
            //  Otherwise, I used to do it this way:
            //widgetPropInputChanged(theInput, widgetID, targetPageID, callerID, 'false');
        }
        return 0;
    }

    /* param callerID is to identify who called this fn, for logging only.
     */
    function widgetPropInputChanged(theInput, widgetID, targetPageID, callerID, forceReload, noPropUpdate){
        theInput.blur();  //prevent recursion that happens when input looses focus.
        if (theInput.type == "checkbox"){
            //logDebug(dump(theInput));
            pickit(theInput.name, ""+theInput.checked, widgetID, targetPageID, callerID, forceReload, noPropUpdate);
        } else {
            pickit(theInput.name, theInput.value, widgetID, targetPageID, callerID, forceReload, noPropUpdate);
        }
    }

    function widgetPropCheckboxChanged(theInput, widgetID, targetPageID, callerID){
        if (theInput.checked){
            window.status = "was checked, now false";
            pickit(theInput.name, "true", widgetID, targetPageID, callerID, false, false);
        } else {
            window.status = "unchecked";
            pickit(theInput.name, "false", widgetID, targetPageID, callerID, false, false);
        }
    }

    /*This one is for Widget properties, see pagePropertyChanged() below for Page properties.
     * forceReload is a js boolean.  It implies that the inspector window must be reloaded
     * to get the new display value from the back end.
     * noPropUpdate is a js boolean.  It means that the inspector beanshell event will not update the property value.
     */
    function pickit(propertyName, propertyValue, widgetID, targetPageID, callerID, forceReload, noPropUpdate){
      var propertyValueSpan = document.all(propertyName+'_value');
      if (propertyValueSpan != null){
        propertyValueSpan.innerHTML = propertyValue;  //currently, this is a special value for ServerSideEvent editors.
      }
      var url = getGetDataURL(widgetID, propertyName, propertyValue, targetPageID)
               + "&dmFormat=XML" + "&callerID="+callerID+"&noPropUpdate="+noPropUpdate;
      if (propertyName == 'name'){
          forceReload = true;
      }
      loadXMLResourceForInspector(url, "WIDGET", targetPageID, widgetID, forceReload);
    }

    function pagePropInputOnKeyDown(theInput, widgetID, targetPageID){
        //note: "event" is magically defined, so don't define it or you shadow it.
        if (event.keyCode == 13){
             //see note in widgetPropInputChanged above.
             // I now use blur instead of calling this next line directly. 6/18/2002 3:52PM
             theInput.blur();
             //pagePropInputChanged(theInput, widgetID, targetPageID);
        }
        return 0;
    }

    function pagePropInputChanged(theInput, widgetID, targetPageID){
        pagePropertyChanged(theInput.name, theInput.value, widgetID, targetPageID);
    }

    function pagePropertyChanged(propertyName, propertyValue, pageID, targetPageID){
      var propertyValueSpan = document.all(propertyName+'_value');
      if (propertyValueSpan != null){
        propertyValueSpan.innerHTML = propertyValue;  ##Used by editors, e.g. ide/resources/widgets/editors/com.dynamide.datatypes.ServerSideEvent.editor.xml
      }
      var url = getGetDataURL(targetPageID, propertyName, propertyValue, targetPageID) + "&dmFormat=XML";
      loadXMLResourceForInspector(url, "PAGE", targetPageID);
    }

    /*  Don't need to update any pages, just set the value in the Inspector.
     */
    function applicationPropertyChanged(propertyName, propertyValue, propertyDataType){
      alert('applicationPropertyChanged('+propertyName+','+propertyValue+')');
      var propertyValueSpan = document.all(propertyName+'_value');
      if (propertyValueSpan != null){
        propertyValueSpan.innerHTML = propertyValue;
      }
      
      propertyValue = escape(propertyValue);//undo is "unescape"
      var url = "/dynamide/ide?page=inspector&action=setApplicationProperty"
                                    +"&SESSIONID=$SESSIONID&propertyName="+propertyName
                                    +"&propertyValue="+propertyValue
                                    +"&propertyDataType="+propertyDataType
                                    +"&dmFormat=XML";
      loadXMLResource(url);
    }
    
    function showIDEHelp(url){
      if (parent != null && parent.opener != null){
         if (parent.opener.showIDEHelp == null){
            alert('parent.opener.showIDEHelp is null');
         } else {
            parent.opener.showIDEHelp(url);
         }
      }
    }

    function showAllWindows(){
      if (parent != null && parent.opener != null && parent.opener.showAllWindows != null){
        parent.opener.showAllWindows();
      }
      focus();
    }

    function getGetDataURL(widgetID, propertyName, propertyValue, targetPageID){
      propertyValue = escape(propertyValue);//undo is "unescape"
      var url = "/dynamide/ide?page=inspector&action=getData&"
                                    +"SESSIONID=$SESSIONID&propertyName="+propertyName
                                    +"&propertyValue="+propertyValue+"&widgetID="+widgetID+"&targetPageID="+targetPageID;
      return url;
    }


    
    /* widgetID is optional if propertyType is "PAGE", and is required if propertyType is "WIDGET". 
     */
    function loadXMLResourceForInspector(url, propertyType, targetPageID, widgetID, forceReload){
        var res = loadXMLResource(url);
        if (propertyType == "PAGE"){
            afterPagePropertyFetched(res, targetPageID);
        } 
        if (propertyType == "WIDGET") {
            afterWidgetPropertyFetched(res, targetPageID, widgetID, forceReload);
        }
        
    }
    
    function afterPagePropertyFetched(theSource, targetPageID){ 
        if (parent != null && parent.opener != null){ 
           var thePageWindow = parent.opener.getViewByPageID(targetPageID);
           if (thePageWindow != null){ 
               var pos = theSource.indexOf('ERROR:');
               if (pos != 0) { 
                 if (theSource != null && theSource.length > 0){ 
                    try { 
                       thePageWindow.eval(theSource); 
                    } catch (e) {alert('error: '+e); } 
                 } 
               } else { 
                  logDebug('ERROR detected in pagePropertyChanged(): '+theSource); 
                  alert(''+pos+' '+theSource);
               } 
           } else { alert('thePageWindow is null');} 
        } else { alert('parent or parent.opener is null'); } 
    }
    
    
    function afterWidgetPropertyFetched(theSource, targetPageID, widgetID, forceReload){ 
        //alert('afterWidgetPropertyFetched: '+res+' targetPageID: '+targetPageID+' widgetID: '+widgetID);
        if (parent != null && parent.opener != null){ 
           var thePageWindow = parent.opener.getViewByPageID(targetPageID);
           if (thePageWindow != null){
               var pos = theSource.indexOf('ERROR:');
               if (pos != 0) { 
                  var widget = thePageWindow.document.all(widgetID);
                  if (widget!=null){
                      widget.outerHTML = theSource; 
                      if (forceReload) parent.opener.showInspector(null, widgetID, '$subsessionID', targetPageID, null); 
                  } else { var em='ERROR in pickit: '+thePageWindow.name+'.document.all('+widgetID+') could not be found'; 
                           logDebug(em);
                           alert(em);
                  } 
               } else { 
                  logDebug('ERROR detected in pickit(): '+theSource);
                  alert('ERROR at position: '+pos+' source: '+theSource);
               } 
           } else { alert('ERROR [pickit:afterDone1380867283730]: thePageWindow is null');} 
        } else { alert('parent or parent.opener is null'); } 
    }

    //-->
    </script>

#set $wgname = $session.getQueryParam("widgetID")
#set $subsessionID = $session.getQueryParam("SUBSESSIONID")
#set $pageIDParam =  $session.getQueryParam("targetPageID")
#set $subsession = $session.findSession($(subsessionID))
#set $subsessionFoundFrom = "request"
#if ($subsession == null){
    #set $subsessionID = $session.getFieldValue("SUBSESSIONID")
    #set $subsession = $session.findSession($(subsessionID))
    #if ($subsession){
        #set $subsessionFoundFrom = "getFieldValue"
    } #else {
        #set $subsessionFoundFrom = "NOT_FOUND"
    }
}
#set $isBodyClick =  $session.getQueryParam("isBodyClick")
<!-- debug info 1:
wgname: $wgname
#if ($subsession){
    subsessionID: $subsessionID
    subsession: $subsession
}
pageIDParam: $pageIDParam
subsession found from: $subsessionFoundFrom
SESSIONID: $SESSIONID

-->

#if ($subsession == null){
    #if ($pageID == "inspector"){
         <h2>SUBSESSION IS NULL</h2>The IDE Session or the Subsession (the project you were working on) timed out
     } #else {
         <h2>SUBSESSION IS NULL</h2>THIS WIDGET ONLY WORKS IN THE IDE.
     }
} #else {
  #set $subpage = $subsession.findPageByID($pageIDParam)
  #if ($subpage != null){
    <!-- debug info 2:
        " subpage $subpage "
    -->
    #set $currentWidget = ""
    #set $widgetByID = $subpage.getWidgetByID($wgname)
    #if ($wgname == "LAST_WIDGET"){
        ## This little hack takes the field value set by the ide
        ## See: ide.xml::designmodeClick() and ide.xml::showInspector()
        ## or search for "LAST_WIDGET"
        #set $LAST_WIDGET_ID = $subsession.getFieldValue("LAST_WIDGET")
        #set $widgetByID = $subpage.getWidgetByID($LAST_WIDGET_ID)
        #set $wgname = "$LAST_WIDGET_ID"
    }
    <TABLE width="100%" border="0" cellpadding="5" cellspacing="0">
      <TR>
        <TD>
          <table border='0' cellpadding='0' cellspacing='0'>
            <tr>
              <td width='100%'>
                 <b>pageID:</b> $pageIDParam
              </td>
              <td align='right'>
                 <a href='javascript:showAllWindows();'><small>Show<dm_nbsp/>All<dm_nbsp/>Windows</small></a>
              </td>
            </tr>
          </table>




        </TD>
      </TR>
      <TR>
        <TD align="left" colspan="2">
            <b>Object:<dm_nbsp/></b>
            <select name="currentWidgetSelect" onchange="currentWidgetChanged(this, '$pageIDParam');">
            <option>
                Application
            </option>
            ## Note: you can use widget.ID or widget.name.
            #if ($subpage.Widgets != null) {
              #if ($wgname == $subpage.id || "$wgname" == "") {
                <option selected='true'>
                   $subpage.id
                </option>
              } #else {
                <option>
                   $subpage.id
                </option>
              }
              #foreach $wg in $subpage.Widgets {
                #if ($wgname == $wg.name){
                    #set $selected = " selected='true'"
                    #set $currentWidget = $wg
                } #else {
                    #set $selected = ""
                }
                <option $selected>
                   $wg.name
                </option>
              } ##end-for
            }
            </select>

          #if ($widgetByID != null){
             #set $wtp = $widgetByID.type
          } #else {
             #set $wtp = ""
          }
          <center><a href="javascript:showIDEHelp('/dynamide/ide?next=idehelp&showDynamideHelp=1&SESSIONID=$SESSIONID&widgetType=$wtp');">Widget Help</a></center>

        </TD>
      </TR>
    </TABLE>
  } #else {
      <!-- SUBPAGE was null: '$pageIDParam' -->
  } ## end subpage-not-null check.

  #if ($subpage != null){
    #if ($wgname == "Application") {
            <TABLE border="1" cellpadding="0" cellspacing="0" width="100%" >
            #foreach $prop in $subsession.getApplicationProperties() {
                <TR>
                    <TD width="100%" title="$widget.helpTip">
                        $prop.Name
                    </TD>
                    <TD>######## %% TODO : this is kinda funky.  What about other datatypes.
                        ## Let the page get the appropriate editor type for this widget and property.
                        #set $onkeydownChunk = "\"pagePropInputOnKeyDown(this, '$subpage.id', '$subpage.id');\""
                        #set $onchangeChunk = "\"applicationPropertyChanged('$prop.Name', this.value, '$prop.getDatatype().getClass().getName()');\""
                        $session.getApplicationPropertyEditor($session, $subsession, $prop, "$onkeydownChunk", "$onchangeChunk")
                    </TD>
                </TR>
            }
            </TABLE>
    } #elseif ($isBodyClick != null && $isBodyClick == "true") {
        $session.expandResource("resources/widgets/com.dynamide.tableeditor.wm", "com.dynamide.propertytable-isBodyClick")
    } #elseif ("$currentWidget" == null || "$currentWidget" == "") {
        ##Leave table empty
        <!-- currentWidget is empty
        wgname: $wgname
        subsessionID: $subsessionID
        pageIDParam: $pageIDParam
        subsession: $subsession
        currentWidget: $currentWidget
        -->
            ## PAGE PROPERTIES:
            <TABLE border="1" cellpadding="0" cellspacing="0" width="100%" >
            #foreach $prop in $subpage.getPageProperties() {
                <TR>
                    <TD width="100%" title="$widget.helpTip">
                        $prop.Name
                    </TD>
                    <TD>
                ## Let the page get the appropriate editor type for this widget and property.
                #set $okd = "\"pagePropInputOnKeyDown(this, '$subpage.id', '$subpage.id');\""
                #set $och = "\"pagePropInputChanged(this, '$subpage.id', '$subpage.id');\""
                $session.getPagePropertyEditor($session, $subsession, $subpage, $prop, "$okd", "$och")
                ##todo: make an overload using $prop and $subpage. %%
                </TD>
                </TR>
            }
            </TABLE>
    } #else {
        ## WIDGET PROPERTIES:
        <TABLE border="1" cellpadding="0" cellspacing="0" width="100%" >
        #foreach $prop in $currentWidget.Properties {
            #if ("$prop.hidden" != "true"){
            <TR>
                <TD width="100%" >
                    $prop.Name
                </TD>
                <TD>
                ## Let the page get the appropriate editor type for this widget and property.
                #set $okd = "\"widgetPropInputOnkeydown(this, '$currentWidget.ID', '$subpage.id', 'widgetPropInputOnkeydown:dynamic:$currentWidget.ID', 'false');\""
                #set $och = "\"widgetPropInputChanged(this, '$currentWidget.ID', '$subpage.id', 'widgetPropInputChanged:dynamic:$currentWidget.ID', 'false');\""
                #set $defaultProperty = $currentWidget.getPropertyDefault($prop.Name)
                $session.getWidgetPropertyEditor($session, $subsession, $subpage, $currentWidget, $prop, $defaultProperty, "$okd", "$och")
                </TD>
            </TR>
            }
        }
        </TABLE>
    } ##END currentWidget
  } ##END subpage not null
}
]]></htmlsrc>
</widget>