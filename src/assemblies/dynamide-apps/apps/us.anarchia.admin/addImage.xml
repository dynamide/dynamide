<?xml version="1.0"?>
<!DOCTYPE dynamideForm>
<dynamideForm>
    <event language="beanshell" name="addImage_onAction"><![CDATA[
        if (event.getDMAction().equals("getimage")){
            //http://localhost:18080/anarchia-admin?page=addImage&action=getimage&reloadPage=true&filename=fe6f79c5-5dff-4e5a-b168-cc2895bc7146.jpg
            String fn = event.getQueryParam("filename");
            UserRESTHelper backend = getBackend();
            GridFS gridfs = backend.getGridFS();
            DBObject query = new BasicDBObject();
            query.put("metadata.author", "LaramieAuthor");
            if (StringTools.notEmpty(fn)){
                query.put("filename", fn);
            }
            GridFSDBFile dbfile = gridfs.findOne(query);
            String mimeType = dbfile.get("metadata").get("mimeType");
            event.setMimeType(mimeType);
            stream = dbfile.getInputStream();
            event.returnStream(stream);
            return;
        } else if (event.getDMAction().equals("deleteImage")){
            //http://localhost:18080/anarchia-admin?page=addImage&action=deleteImage&reloadPage=true&filename=799a7f28-f2f4-40be-b6a4-2c5e3f5cf657.pdf
            
            String fn = event.getQueryParam("filename");
            if (StringTools.isEmpty(fn)){
                event.returnSource("{'msg':'ERROR: filename was empty'}".replace('\'','"'));
                return;
            }
            UserRESTHelper backend = getBackend();
            GridFS gridfs = backend.getGridFS();
            DBObject query = new BasicDBObject();
            query.put("filename", fn);
            GridFSDBFile dbfile = gridfs.findOne(query);
            if (dbfile==null){
                 event.returnSource(("{'msg':'ERROR: filename not found: "+fn+"'}").replace('\'','"'));
                return;
            }
            gridfs.remove(dbfile);
            event.returnSource(("{'msg':'SUCCESS: filename deleted', 'dbfile':"+dbfile.toString()+"}").replace('\'','"'));
            return;
        
        } else if (event.getDMAction().equals("getimages")){
            //http://localhost:18080/anarchia-admin?page=addImage&action=getimages&reloadPage=true
            UserRESTHelper backend = getBackend();
            GridFS gridfs = backend.getGridFS();
            DBObject query = new BasicDBObject();
            query.put("metadata.author", event.getQueryParam("author"));
            List dbfileList = gridfs.find(query);
            String files = "";
            it = dbfileList.iterator();
            int loop = 0;
            while (it.hasNext()){
                dbfile = it.next();
                String mimeType = dbfile.toString();
                String fn = dbfile.getFilename();
                if (loop>0){
                    files+=",";
                }
                loop++;
                files += mimeType;
            }
            event.returnSource("{\"msg\":\"SUCCESS\", \"files\":["+files+"]}", false, "application/json");
            return;
        }
        //ELSE default is PUT:
        try {
            //http://localhost:18080/anarchia-admin?next=addImage
            Session.UploadedFile uf = session.getUploadedFile("file", "", false);
            try {
                UserRESTHelper backend = getBackend();
                try {
                    GridFS gridfs = backend.getGridFS();   
                    GridFSInputFile fsfile = gridfs.createFile(uf.stream);
                    
                    String clientFilename = uf.filename;
                    String ext = clientFilename.substring(clientFilename.lastIndexOf('.'));
                    String nextid = event.getQueryParam("addImage_nextid");
                    fsfile.setFilename(nextid+ext);
                    
                    DBObject meta = new BasicDBObject();
                    meta.put("mimeType", uf.mimeType);
                    meta.put("clientFilename", clientFilename);
                    meta.put("author", event.getQueryParam("addImage_author"));
                    meta.put("caption", event.getQueryParam("addImage_caption"));
                    meta.put("title", event.getQueryParam("addImage_title"));
                    meta.put("id", nextid);
                    fsfile.put("metadata", meta);
                    
                    fsfile.save();
                    
                    event.returnSource("{\"msg\":\"SUCCESS\", \"filename\":\""+fsfile.getFilename()+"\"}", false, "application/json");
                    return;
                } finally {
                    backend.close();
                }
                return;
            } catch (Throwable t){
                event.returnSource(  "{\"error\":\""+t.toString()+"\"}",
                                           false, 
                                           "application/json");
            }
            
            
            event.returnSource("<html><body>uploaded: "+f+"</body></html>");
            return;
        } catch (Exception e){
            event.returnSource("ERROR calling getUploadedFile: "+e+" stack trace: "+Tools.getStackTrace(e));
            return;
        }
    ]]>
    </event>
    
    <event language="beanshell" name="addImage_onAction______OLD"><![CDATA[
    //event.returnStream(uf.stream...)
        if (event.getDMAction().equals("getimage")){
            event.returnSource("{\"msg\":\"SUCCESS-getimage\"}", false, "application/json");
            return;
        }
        try {
            String IMAGES_DIR = "/Users/vcrocla/tmp/anarchia/imagerepo";
            Session.UploadedFile uf = session.getUploadedFile("file", "", false);
            //File f = uf.file;
                    
            
            try {
                UserRESTHelper backend = getBackend();
                try {
                    GridFS gridfs = backend.getGridFS();   
                    GridFSInputFile fsfile = gridfs.createFile(f);
                    
                    
                    String clientFilename = fsfile.getFilename();
                    String ext = clientFilename.substring(clientFilename.lastIndexOf('.'));
                    String nextid = event.getQueryParam("addImage_nextid");
                    fsfile.setFilename(nextid+ext);
                    
                    DBObject meta = new BasicDBObject();
                    meta.put("mimeType", uf.mimeType);
                    meta.put("clientFilename", clientFilename);
                    meta.put("author", event.getQueryParam("addImage_author"));
                    meta.put("caption", event.getQueryParam("addImage_caption"));
                    meta.put("title", event.getQueryParam("addImage_title"));
                    meta.put("id", nextid);
                    fsfile.put("metadata", meta);
                    
                    fsfile.save();
                    
                    event.returnSource("{\"msg\":\"SUCCESS\", \"filename\":\""+fsfile.getFilename()+"\"}", false, "application/json");
                    return;
                } finally {
                    backend.close();
                }
                return;
            } catch (Throwable t){
                event.returnSource(  "{\"error\":\""+t.toString()+"\"}",
                                           false, 
                                           "application/json");
            }
            
            
            event.returnSource("<html><body>uploaded: "+f+"</body></html>");
            return;
        } catch (Exception e){
            event.returnSource("ERROR calling getUploadedFile: "+e+" stack trace: "+Tools.getStackTrace(e));
            return;
        }
    ]]>
    </event>
    
  <widgets>
    <widget id="session1">
      <properties>
        <property name="type">
          <value>com.dynamide.session</value>
        </property>
      </properties>
    </widget>
    <widget id="hiddenPageID">
      <properties>
        <property name="field">
          <value>page</value>
        </property>
        <property name="type">
          <value>com.dynamide.hidden</value>
        </property>
        <property name="value">
          <datatype>com.dynamide.datatypes.WebmacroDatatype</datatype>
          <value>$pageID</value>
        </property>
      </properties>
    </widget>
    <widget id="img">
      <properties>
        <property name="caption">
          <value>Image URL</value>
        </property>
        <property name="captionClass">
          <value>caption</value>
        </property>
        <property name="captionWidth">
          <value>180</value>
        </property>
        <property name="name">
          <value>img</value>
        </property>
        <property name="type">
          <value>com.dynamide.edit</value>
        </property>
        <property name="textSize">
          <value>50</value>
        </property>
        <property name="cellpadding">
          <value>5</value>
        </property>
      </properties>
    </widget>
    <widget id="caption">
      <properties>
        <property name="caption">
          <value>Caption</value>
        </property>
        <property name="captionClass">
          <value>caption</value>
        </property>
        <property name="captionWidth">
          <value>180</value>
        </property>
        <property name="name">
          <value>panelCaption</value>
        </property>
        <property name="type">
          <value>com.dynamide.edit</value>
        </property>
        <property name="textSize">
          <value>50</value>
        </property>
        <property name="cellpadding">
          <value>5</value>
        </property>
      </properties>
    </widget>
    <widget id="title">
      <properties>
        <property name="caption">
          <value>Title</value>
        </property>
        <property name="captionClass">
          <value>caption</value>
        </property>
        <property name="captionWidth">
          <value>180</value>
        </property>
        <property name="name">
          <value>title</value>
        </property>
        <property name="type">
          <value>com.dynamide.edit</value>
        </property>
        <property name="textSize">
          <value>50</value>
        </property>
        <property name="cellpadding">
          <value>5</value>
        </property>
      </properties>
    </widget>
    <widget id="author">
      <properties>
        <property name="caption">
          <value>Author</value>
        </property>
        <property name="captionClass">
          <value>caption</value>
        </property>
        <property name="captionWidth">
          <value>180</value>
        </property>
        <property name="name">
          <value>author</value>
        </property>
        <property name="type">
          <value>com.dynamide.edit</value>
        </property>
        <property name="textSize">
          <value>50</value>
        </property>
        <property name="cellpadding">
          <value>5</value>
        </property>
      </properties>
    </widget>
    <widget id="nextid">
      <properties>
        <property name="caption">
          <value>NextID</value>
        </property>
        <property name="captionClass">
          <value>caption</value>
        </property>
        <property name="captionWidth">
          <value>180</value>
        </property>
        <property name="name">
          <value>nextid</value>
        </property>
        <property name="type">
          <value>com.dynamide.edit</value>
        </property>
        <property name="textSize">
          <value>50</value>
        </property>
        <property name="cellpadding">
          <value>5</value>
        </property>
      </properties>
    </widget>
    
    <widget id="submit1">
      <properties>
        <property name="action">
          <value>doSubmitThing</value>
        </property>
        <property name="caption">
          <value>Submit</value>
        </property>
        <property name="captionWidth">
          <value>180</value>
        </property>
        <property name="cellpadding">
          <value>5</value>
        </property>
        <property name="type">
          <value>com.dynamide.submit</value>
        </property>
      </properties>
    </widget>
  </widgets>
  <htmlsrc browser="*"><![CDATA[
<HTML>
  <HEAD>
    <TITLE>$page.title</TITLE>
    <script src="/anarchia/js/jquery-2.1.3.min.js"></script>
    <script src="/anarchia-admin/js/anarchia.js"></script>
  </HEAD>
  <BODY id="page1" bottomMargin="15" leftMargin="10" topMargin="15" rightMargin="10" name="addPanel">
    <P>Add Image</P>
    <FORM name="form$pageID" method="POST" action="$session.applicationURI" enctype="multipart/form-data">
      <span class="caption" style='margin-left: 120px;'>Image file: </span><span><input TYPE="file" NAME="file"/></span>
      <br />
      <SPAN class="widget" id="hiddenPageID"/>
      <SPAN class="widget" id="author"/>
      <SPAN class="widget" id="img"/>
      <SPAN class="widget" id="caption"/>
      <SPAN class="widget" id="title"/>
      <SPAN class="widget" id="nextid"/>
      <SPAN class="widget" id="submit1"/>
    </FORM>
  </BODY>
  <script>
    function onNextID(id)\{
        console.log("onNextID: "+id);
        \$('\#addImage_nextid').val(id);
    \}
    \$(document).ready(function()\{
       //getNextID('panels', onNextID);
       onNextID(GUID());
    \});
    </script>
</HTML>
]]></htmlsrc>
  <properties>
    <property name="formAction">
      <value>mojoAction</value>
    </property>
    <property name="formName">
      <value></value>
    </property>
    <property name="name">
      <readOnly>true</readOnly>
      <value>addPanel</value>
    </property>
    <property name="title">
      <value>Add Image</value>
    </property>
    <property name="type">
      <readOnly>true</readOnly>
      <value>pagetypes/com.dynamide.page</value>
    </property>
  </properties>
</dynamideForm>