<?xml version="1.0"?>
<!DOCTYPE dynamideDoco>
<!--
     *************************************************************************
     ***   WARNING: all webmacro examples in this application must
     ***   be escaped, since the result of the xsl transform is passed through
     ***   webmacro.  However, examples should be in CDATA sections, and not
     ***   have < and > changed to &lt; and &gt;
     *************************************************************************

-->
<dynamideDoco pageTitle="Overview">

  <H4>What is Dynamide?</H4>
  <P>
  Dynamide is a framework for designing and running dynamic web applications.
  </P>

  <P>
  Dynamide serves fully dynamic web pages customized and generated for the user, based on the user's identity,
  the user's preferrences, data from a databases, web services, feeds, remote servers,
  or other external sources.  Dynamide supports interactive web sites, and Web Applications
  -- software applications that are delivered to the user completely via web pages.
  </P>

  <P>
  Dynamide is centered around reuse of components, and ships with a large component library.
  Application developers use the Dynamide IDE to create Pages, drop Widgets (components) on the Pages,
  and wire ServerSide Events to the Session, Page and Widget objects.
  </P>

  <P>
  Dynamide uses templating for presentation, and separates ServerSide Event logic from
  the presentation, using standard Java.
  Dynamide runs in a standard J2EE application server on any platform.
  </P>

  <P>This page you are reading was generated by Dynamide.</P>

  <H4>OK, but what is it?</H4>


    <P>
    At the core, Dynamide lets you do this:
    </P>

    <example><![CDATA[<html>
    <BODY>
    <p>This is my first page</p>
    <span class='widget' id='treeview1' />
    </BODY>
</html>]]></example>


    <P>
    This is then rendered as a page with a Server-Side component that outputs
    a cross-browser dynamic tree outline, with your data in it. To achieve
    this, Dynamide also stores some information about "treeview1" in a
    resource file in XML in your Application.  The information is very
    minimal, and comprises just the properties that need to be set to
    configure the predefined "com.dynamide.treeview" Widget that is in the
    Dynamide component library.  The advantage is that your HTML page is very
    clean, and contains only HTML. </P>

    <P>
    Here's another HTML page with a minimal component, "com.dynamide.breadcrumbs",
    that tracks where the user has been on the site, and displays
    "breadcrumbs" for the user -- links to pages they have visited, in order.
    </P>

    <example><![CDATA[<html>
    <body>
    <span class='widget' id='breadcrumbs1' />
    <p>This is my first page</p>
    </body>
</html>
]]></example>


    <P>
    Here are the Widget properties for this component:
    </P>

        <example><![CDATA[<widget id="breadcrumbs1">
    <properties>
        <property name="type">
            <value>com.dynamide.breadcrumbs</value>
        </property>
    </properties>
</widget>

]]></example>

    <P>
    This will generate code at runtime like this:
    </P>

    <example><![CDATA[<span class="widget" id="breadcrumbs1">

<style><!--
            .breadcrumbs1 {
                font-family: Verdana, Geneva, Arial,Helvetica,sans-serif;
                font-size: 8pt;
                font-weight: bold;
                color: black;
            }
            --></style>
<small>
<a class="breadcrumbs1" href="?SESSIONID=DM_1027434772292&next=page1">Page 1</a>
<b class="breadcrumbs1">></b>
<a class="breadcrumbs1" href="?SESSIONID=DM_1027434772292&next=page2">Page 2</a>
<b class="breadcrumbs1">></b>
<a class="breadcrumbs1" href="?SESSIONID=DM_1027434772292&next=page3">Page 3</a>
<b class="breadcrumbs1">></b>
<a class="breadcrumbs1" href="?SESSIONID=DM_1027434772292&next=page4">Page 4</a>
<b class="breadcrumbs1">></b>
<span class="breadcrumbs1">Page Done</span>
</small>
</span>

    ]]></example>

    <P>
    Which will be rendered in the browser like this (except that the links would work):
    </P>
    <exampleHTML>
    <span class="widget" id="breadcrumbs1">

    <style><!--
                .breadcrumbs1 {
                    font-family: Verdana, Geneva, Arial,Helvetica,sans-serif;
                    font-size: 8pt;
                    font-weight: bold;
                    color: black;
                }
                --></style>
    <small>
    <u class="breadcrumbs1">Page 1</u><dm_nbsp/>
    <b class="breadcrumbs1">&gt;</b><dm_nbsp/>
    <u class="breadcrumbs1" href="#">Page 2</u><dm_nbsp/>
    <b class="breadcrumbs1">&gt;</b><dm_nbsp/>
    <u class="breadcrumbs1" href="#">Page 3</u><dm_nbsp/>
    <b class="breadcrumbs1">&gt;</b><dm_nbsp/>
    <u class="breadcrumbs1" href="#">Page 4</u><dm_nbsp/>
    <b class="breadcrumbs1">&gt;</b><dm_nbsp/> <dm_nbsp/>
    <span class="breadcrumbs1">Page Done</span>
    </small>
    </span>
    </exampleHTML>

    <p>The magic is that there is a Widget, called com.dynamide.breadcrumbs that exists in
    the Dynamide component library.  This component reads the properties you have set, and
    renders itself as the page is being produced.  It has access to the user's Session so it "knows"
    where the user has navigated, and builds the list.</p>

  <H4>OK, but how do I make my Application <i>DO</i><dm_nbsp/>anything?</H4>

    <p>(Be sure to check out the

  $session.link("", "/doc/help/feature-list", "Feature List")
   as many tasks are automatically handled by Dynamide.)</p>


    <P>
    You put functionality in event handlers associated with Sessions, Pages
    and Widgets. The event handlers are written in a ServerSide processing
    language, such as Beanshell (Java), Jacl (Tcl), and Jython (Python). </P>

    <P>Here's an example of a ServerSideEvent, written in Beanshell (which is
    really just Java).  This example changes the internationalization of the
    application to the user's desired (human) language, which is stored in an
    Application-defined list of available languages.  In this sample application
    (the dynamide <b>"demo"</b> application), that list is presented in a com.dynamide.radiogroup, and
    the user has clicked on the desired language in the radiogroup and
    pressed the "Submit" button.  The request comes in and is processed on
    the server with this event. (Do not confuse the use of the attribute
    "language" of the "event" element to specify beanshell -- this example is
    about changing the display from, say, English to Spanish.)</P>

  <example><![CDATA[
<event language="beanshell" name="page1_onAction"><![CDATA[

  Field languageField = event.session.findField("language");
  String languageCode = languageField.getValue();
  String oldLanguage = event.session.getCurrentLanguageCode();
  if ( languageCode.length() > 0 && (! oldLanguage.equals(languageCode)) ){
    event.println("page1 changing language: "+languageCode);
    event.session.loadInternationalization(languageCode);
  } else {
    event.println("page1 not changing language. old: '"+oldLanguage
                 +"' new: '"+languageCode+"'");
  }

]]>]]&gt;<![CDATA[</event>
  ]]></example>

    <P>In this example there is a field named "language" which is wired to a widget
    that displays the language code for the user in a radio group.  Dynamide has
    built-in internationalization support, and uses the standard language code
    designations (e.g. en-US, un-UK, es, and so on).  The session object manages
    the state of the user's interactive session on the server side, and offers many
    methods, such as the key methods for internationalization: session.loadInternationalization(String)
    and session.getCurrentLanguageCode().  The println statements go to the debug
    buffer on the server, which can be retrieved by the programmer at any time during the
    session lifetime.
    </P>

    <P>This example could have been written tersely like this:
    </P>

  <example><![CDATA[
<event language="beanshell" name="page1_onAction"><![CDATA[

  String languageCode = event.session.findField("language").getValue();
  String oldLanguage = event.session.getCurrentLanguageCode();
  if ( languageCode.length() > 0 && (! oldLanguage.equals(languageCode)) ){
    event.session.loadInternationalization(languageCode);
  }

]]>]]&gt;<![CDATA[</event>
  ]]></example>



    <P>Here's another example of a ServerSideEvent.  This example flags a user input field
    if the user enters the value "Joe".
    </P>

  <example><![CDATA[
<event language="beanshell" name="page1_onAction"><![CDATA[

  customerField = event.session.findField("customer");
  if (customerField != null){
      // This is a silly example.  Normally, you would perform a DB lookup here...
      boolean makeError = (customerField.getValue().equals("Joe"));
      if (makeError){
          customerField.setErrorMessage("User 'Joe' is not valid");
      } else {
          customerField.setError(false);
          //clear the error in case user saw this page
          // and got the error, but has now fixed it.
      }
      event.println("Field name: "+customerField.getName()
                 + " Field value: "+customerField.getValue());
  } else {
      event.println("Field was null");
  }

]]>]]&gt;<![CDATA[</event>
  ]]></example>

  <p>Flagged fields cause the current input page to be
    re-displayed.  The Widget that is wired to the field will display its caption
    in italic in a contrasting color and will dispaly the (by now obligatory)
    asterisk image. </p>

    <p><I>Before</I><dm_nbsp/>submitting form:</p>

    <exampleHTML>
    <!-- Since this documentation page is static, include the .errorCaption style manually.
         In a real Dynamide application, the style could belong to the Widget, Page or Application
    -->
  <span class="widget" id="customer1">
  <style>
  <!--
    .caption  {font-family:Tahoma, Arial,
                    sans-serif; font-size:9pt; font-weight:bold; }
    .errorCaption  {color: red; font-family:Tahoma, Arial,
                    sans-serif; font-size:9pt; font-weight:bold;
                    font-weight:bolder; font-style:italic;}
  -->
  </style>
  <table border="0" cellpadding="0" cellspacing="0" class="">
  <tr valign="center">
  <td valign="center" class="caption" align="right">
  <nobr>Customer Name:<dm_nbsp/></nobr>
  </td>
  <td valign="center">
  <input type="text" name="customer" id="customer" class="" width="" size="20" value="Joe" />
  </td>
  <td valign="center">
  <input type="button" class="pickbutton" name="customer_pickerButton" value="..."
     onClick="" />
  </td>
  <td width="20">
  <dm_nbsp/>
  </td>
  </tr>
  </table>
  </span>
    </exampleHTML>

    <p><I>After</I><dm_nbsp/>submitting form:</p>

    <exampleHTML>
    <!-- Since this documentation page is static, include the .errorCaption style manually.
         In a real Dynamide application, the style could belong to the Widget, Page or Application
    -->
  <span class="widget" id="customer1">
  <style>
  <!--
    .errorCaption  {color: red; font-family:Tahoma, Arial,
                    sans-serif; font-size:9pt; font-weight:bold;
                    font-weight:bolder; font-style:italic;}
  -->
  </style>
  <table border="0" cellpadding="0" cellspacing="0" class="">
  <tr>
  <td colspan="4">
  <div class="errorCaption">User 'Joe' is not valid</div>
  </td>
  </tr>
  <tr valign="center">
  <td valign="center" class="errorCaption" align="right">
  <nobr>Customer Name:<dm_nbsp/></nobr>
  </td>
  <td valign="center">
  <input type="text" name="customer" id="customer" class="" width="" size="20" value="Joe" />
  </td>
  <td valign="center">
  <input type="button" class="pickbutton" name="customer_pickerButton" value="..."
     onClick="" />
  </td>
  <td width="20">
  #set $src = $session.getInclude("resources/images/redstar.gif")
  <img src="$src" />
  </td>
  </tr>
  </table>
  </span>
    </exampleHTML>


  <P>
  Of course, since the display is a Widget, you can control how the error message is
  displayed by setting the Widget's properties, or by changing CSS styles in the Widget, Page, or Application.
  In this example, the Widget's showErrorAbove property was set to true, so the error message that was set
  in the event is shown above the control.
  </P>

  <P>Within the ServerSideEvent, you can call any methods of any Java Beans you have installed,
  so the events can contain all the functionality of your Application, or they can be the glue to
  your existing back end.
  </P>

  <h4>What are Widgets?</h4>

  <P>
  Widgets are reusable components that you drop onto Dynamide pages.  They provide a presentation (HTML, XML, or any format you like), and functionality.
  They can be manipulated in code on the server by the Application through properties and methods.  Widgets
  are responsible for presenting some information to the user, and allowing interaction with the user for
  that information.
  </P>

  <P>
  For example, a com.dynamide.radiogroup is a widget that lets you present a list of items
  to the user using "radio" style checkboxes.  The stock HTML radio checkboxes are difficult to code in normal CGI
  programming if you want them to operate as a group and present one list of information.  The com.dynamide.radiogroup
  automatically groups them, displays them correctly, looks up the list of values from a single field, and saves
  the user's choice when the page is submitted.  Here is an example of a com.dynamide.radiogroup:

<exampleHTML>
  <span class="widget" id="com_dynamide_radiogroup1">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td>
<table border="1" class="" cellpadding="2" cellspacing="0" bgcolor='white'>
<tr>
<td width="" align="right" valign="center">
<div class="caption">
<nobr>Lanugage:<dm_nbsp/></nobr>
</div>
</td>
<td width="120">
<table border="0" cellpadding="0" cellspacing="0" width="120">
<tr>
<td>
<nobr>
<INPUT TYPE="radio" NAME="language" VALUE="en-us" checked="1" tabindex="2" />English
</nobr>
</td>
</tr>
<tr>
<td>
<nobr>
<INPUT TYPE="radio" NAME="language" VALUE="en-uk" />British
</nobr>
</td>
</tr>
<tr>
<td>
<nobr>
<INPUT TYPE="radio" NAME="language" VALUE="es" />Spanish
</nobr>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
<td width="20"><dm_nbsp/></td>
</tr>
</table>
</span>
</exampleHTML>
  </P>



  <P>
  All Widgets are data-aware.  You simply set the "datasource" and "field" properties, and the Widget will
  display the current value (or values for row- and table-oriented data), and will keep user changes to the
  field in memory in the Session.
  </P>

  <H4>Do I have to use only the Dynamide Widgets?</H4>

  <P>
  The Dynamide Widgets allow you to build most interactive, dynamic applications, such as e-commerce,  right out of the box.
  In addition to the extensive Widgets shipped
  with Dynamide, you can write your own, use third party widgets,
  or create Application-specific widgets.

  </P>

  <P>
  Application-specific Widgets are Pages that you design in the IDE, and save for use as embedded Widgets in other Pages.
  Any area of layout and functionality can be designed on a page, then included in other pages.
  </P>

  <P>
  For example, to write
  an WebMail application, you'd create a ComposeMessage widget, an Inbox widget, and a ViewMessage Widget.  You'd make a main page,
  where you'd put pre-defined Widgets for controlling the Application, such as a "Compose" com.dynamide.button and a "Send" com.dynamide.button.
  You would then put two of the three Application specific Widgets on the main page:
  either Inbox and ViewMessage or Inbox and Compose message.  You'd author the Inbox widget to interact with the ViewMessage Widget
  to set it's messageSource property, a property you had created in the ViewMessage Widget.  The beauty of Application-specific Widgets
  is that you design them as Pages, in WYSIWYG mode in the IDE.  You can change them later without messing with the main page, and vice versa.
  </P>

  <P>
  You would write Custom Widgets when you want to reuse functionality across applications, and this functionality
  does not exist in available Widgets.  You could have a Widget that encapsulates credit-card authorization, or displays
  an LDAP tree, or lets you request images from a remote image server, such as a map server.
  </P>

  <h4>OK, what are Widgets, <i>really</i>?</h4>

  <p>Widgets are XML resources that provide layout markup and functionality.  The default layout language is
  Webmacro, and the default functionality language is Beanshell.  Webmacro templates look like HTML, but allow values to
  be extracted from a context, and allow Java methods to be called.  Dynamide pre-loads the context with useful
  Java references to the ServerSide objects (Page, Widget, Session, Fields, HttpServletRequest). Widgets define properties, which are stored in XML,
  and are configurable through the Dynamide IDE.  However, they are plaintext XML, and can be edited by hand if desired.
  </p>

  <p>
  The Widget author writes the layout markup in an "htmlsrc" element.  The author can use logic to branch to code
  for different browsers, or can simply provide an "htmlsrc" element for each problematic browser, and one
  for "*".  The author can put procedural functionality in a Widget event for use by the Widget, and can support
  Application events, for use by the Application designer.  For example, writing a map server Widget, the Widget
  author can support an "onNavigate" event, to allow the Application designer to hook in some code when the user
  has clicked on the navigation controls, but the Widget has not yet connected to the remote map server.
  </p>

  <P>
  Here's an example, showing the com.dynamide.img Widget.  You could just use &lt;img src='myImage.jpg'/&gt; on your page, but there
  are a number of things you might wish to control, especially for different browsers.  This simple Widget encapsulates
  solutions to those issues in a reusable format.  In this case, the bug is that Microsoft Internet Explorer, even in
  version 6, still has a bug where img's, placed inside table cells, will have extra space around the img, forcing
  the cell to be too big.  Also, this img is data-aware.  If you wire it to the field "IMAGE_NAME" in the datasource
  "OHNO_ITS_THE_DANG_PETSTORE_EXAMPLE", then when the user scrolls the datasource to the next pet, the correct image name
  is selected.
  </P>


    <p>This is the page source that you write:</p>

<example><![CDATA[<html>
    <BODY>
    <p>This page uses a com.dynamide.image Widget.</p>
    <span class='widget' id='image1' />
    </BODY>
</html>]]></example>

<p>Since the Page owns the <i>instances</i> of the Widgets that are on it, there is a page specification that you can use Dynamide to write, either in the IDE or on the command-line or batch,
that looks like this:</p>

<example><![CDATA[<widget id="image1">
  <properties>
    <property name="height">
      <value>40</value>
    </property>
    <property name="src">
      <value>resources/images/logo.gif</value>
    </property>
    <property name="type">
      <value>com.dynamide.img</value>
    </property>
    <property name="width">
      <value>40</value>
    </property>
  </properties>
</widget>
]]></example>


    <p>Next is the com.dynamide.image Widget type file that is used -- <b><i>you don't need to write this part!</i></b>
    You can think of the Widget type files as Classes, and Widget instances on Pages as Objects, or Class instances.
    Thus one Page could have multiple com.dynamide.image components on it, each with a different "src" property.</p>

    <example><![CDATA[
    <htmlsrc browser="*"><![CDATA[
    \#set \$w = ""
    \#set \$h = ""
    \#if (\$widget.width != "") { \#set \$w = " width=\"\$widget.width\"" }
    \#if (\$widget.height != "") { \#set \$h = " height=\"\$widget.height\"" }
    \#set \$ti = ""
    \#if (\$widget.tabindex != "") { \#set \$ti = "tabindex='\$widget.tabindex'" }


    \#set \$imgSrc = ""
    \#if (\$widget.value != ""){
            \#set \$imgSrc = \$session.getInclude("\$widget.value")
    } \#else {
        \#if (\$widget.src != ""){
            \#set \$imgSrc = \$session.getInclude("\$widget.src")
        }
    }
    \#if (\$widget.wrapNoSpaceIE == "true"){
        <style>
        .nospace \{margin:0; padding:0; border:0;  \}
        </style>
        <pre class='nospace'><table border='0' cellpadding='0'
           cellspacing='0'><tr><td><img src="\$imgSrc"
           border="\$widget.border" \$w \$h
            \$ti
          /></td></tr></table></pre>
    } \#else {
        <img src="\$imgSrc" border="\$widget.border" \$w \$h \$ti/>
    }
    ]]>]]&gt;<![CDATA[</htmlsrc>

    <properties>
        <property name="border"><defaultValue>0</defaultValue></property>
        <property name="caption">
          <defaultValue></defaultValue>
          <intl>1</intl>
        </property>
        <property name="captionNOBR">
            <defaultValue>true</defaultValue>
            <datatype>boolean</datatype>
        </property>
        <property name="datasource">
            <datatype>com.dynamide.datatypes.IDatasourceDatatype</datatype>
            <defaultValue></defaultValue>
        </property>
        <property name="enabled">
            <defaultValue>true</defaultValue>
            <datatype>boolean</datatype>
        </property>
        <property name="field"><defaultValue></defaultValue></property>
        <property name="height"><defaultValue></defaultValue></property>
        <property name="name"><defaultValue>img1</defaultValue></property>
        <property name="src"><defaultValue></defaultValue></property>
        <property name="tabindex"><defaultValue></defaultValue></property>
        <property name="type">
            <defaultValue>com.dynamide.img</defaultValue>
            <readOnly>true</readOnly>
        </property>
        <property name="visible">
            <defaultValue>true</defaultValue>
            <datatype>boolean</datatype>
        </property>
        <property name="width">
            <defaultValue></defaultValue>
        </property>
        <property name="wrapNoSpaceIE">
            <datatype>boolean</datatype>
            <defaultValue>false</defaultValue>
            <helpTip>This is a special property that deals with
            an IE bug. If you put an img, into a table,
            the cell has extra space below the image.
            In cases where you aren't putting this component
            in a table cell, you can leave this property false.
            </helpTip>
        </property>
    </properties>
    ]]>
    </example>

    <p>If you wished to create a custom component for reuse, then this Widget shows exactly what
    kind of code you would write.  Notice that the Widget author specifies all allowable
    properties in this file, along with default values, and uses the properties with syntax like \$widget.border at render-time.</p>

<p></p>

<hr/>

<h4>Colophon</h4>

<p>Finally, a note how this page is created and how it uses templates and XSL. </p>

<p>The entire Dynamide help application (/dynamide/doco) is a Web-application
that uses one page.  The application has an event that maps the
pathInfo from the URI to figure out which topic the user has chosen via clicking on a hyperlink.
For example, this page is /dynamide/doco/doc/help/dynamide-overview whereas the FAQ is
/dynamide/doco/doc/help/FAQ.  The application pulls that topic out of the XML repository
and sets the com.dynamide.xsl component's
"xml" property to that topic's XML, e.g. "FAQ.xml", but with a full path.</p>
<p>The navigation menu at the left is
a com.dynamide.linkstrip widget, with its "orientation" property set to
"vertical", and there is a com.dynamide.dynamidelogo component in the upper left hand
corner with the logo.</p>

<p>The Dynamide application and Page objects are stored in XML in the project.
But for this application, the topics are also stored in XML,
using application-specific tags, like &lt;example>.  The XML is read by the com.dynamide.xsl widget,
along with the corresponding XSL file, and the processed results appear as
the result of the widget on this page.  The XSL removes the need to wrap
all the examples on the page in nice boxes in the XML source -- instead, that is specified
in the XSL file. XSL deals with this type of transformation in a very clean and elegant way. </p>

<p>However,  XSL deals with state and dynamic data poorly, and using it to manipulate variables
is  cumbersome.  This is where templating languages shine. By default, Dynamide uses WebMacro
which handles variables and programatic control, and allows for custom page layout.
Also, this topic could have used terms like \$session.USER to print out personalized messages
to logged-in users. </p>

<p>For this page, it really means that we didn't need to use XSL
to assemble the page from multiple XML documents, and have a bear of an XSL stylesheet.  It
also made it easy to have separate stylsheets associated with each topic.</p>



<p>Dynamide applications can be dynamic or static.  Dynamic applications can
be pooled and shared among users (similar to EJBs, stateful or stateless).
You are either reading this file as a static application,
or as a pooled dynamic application.
Applications can be cached to disk or to memory, so the Dynamide session
may not even be active, even though the application may be dynamic.
Applications can use any combination of Dynamide's
live rendering and caching capabilities.  Since in this application, there's no user-customized
state or data, the application is cached to disk, in a process called "publishing"
and served up as static files.  You
can control Dynamide's caching through the API, or you can simply let Dynamide cache any
pages with unchanging data, or you can explicitly "publish" the application.
</p>

<p>Publishing is controlled by the application programmer and
the program administrator.  The programmer ensures that the application, or pages of the application,
can be published statically.  Simple applications need no special properties.  Most applications
would specify a few properties.  For applications that don't simply map Dynamide Page objects to
HTML pages, such as this one, the programmer can hook the "onPublish" event.
Then the administrator can publish applications through
the Admin control panel.  However, since the publishing step is programatic,
it can be set up in "cron", for example, or kicked off when you know you have checked in
changes.</p>

<hr/>
<p><dm_nbsp/>
</p>

<p></p>

</dynamideDoco>