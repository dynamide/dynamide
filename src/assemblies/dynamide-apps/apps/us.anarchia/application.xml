<?xml version="1.0"?>
<!DOCTYPE dynamideForm>
<application>
  <fields href="fielddefs.xml"/>
  <event language="beanshell" name="application_onImport"><![CDATA[
    import com.dynamide.*;
    import com.dynamide.util.*;
    import com.dynamide.Widget;
    import com.dynamide.datatypes.*;
    import com.nebhale.jsonpath.JsonPath;
    import us.anarchia.db.UserRESTHelper;
    import com.mongodb.util.JSON;
    import org.json.*;
  ]]></event>

  <event language="beanshell" name="application_queryNextPage"><![CDATA[
  	  return;   //For now, skip login, while we debug other pages.
  ]]></event>

  <event language="beanshell" name="application_onAction"><![CDATA[
        //============== getBackend() ==========================
        UserRESTHelper getBackend(){    
            UserRESTHelper backend = new UserRESTHelper();
            backend.setup("anarchia", "bob", "MangoDog");
            return backend;
        }
        
        //============== getNextID() ==========================
        String getNextID(){
            backend = getBackend();
            String payload = backend.get("anarchia",
                                         "idservice",
                                         "{'collection':'images'}"); 
            String nextID = "";
            Object json = new JSONTokener(payload).nextValue();
            if (json instanceof JSONObject) {
                JSONObject jsonobject = new JSONObject(payload);
                 nextID = ""+jsonobject.get("nextID");
            } else if (json instanceof JSONArray) {
                JSONArray jsonarray = new JSONArray(payload);
                nextID = ""+jsonarray.get(0).get("nextID");
            }
            int iNextID = Integer.parseInt(nextID);
            iNextID++;
            nextID = ""+iNextID; 
            idJson = JSON.parse(payload);
            idJson.put("nextID", nextID);
            
            backend.put("anarchia",
                         "idservice",
                         idJson.toString(), 
                         false, 
                         false);  

            return nextID;
        }
        
        //============== getNextID() ==========================
        String getIDBase(String collection){
            return "http://anarchia.us/id/"+collection+"/";
        }
        
        //============== getJSONArray() ==========================
        JSONArray getJSONArray(String payload){
            Object json = new JSONTokener(payload).nextValue();
            System.out.println("===========================\ngetJSONArray payload: "+payload);
            System.out.println("===========================\ngetJSONArray json: "+json);
            if (json instanceof JSONArray) {
                JSONArray jsonarray = new JSONArray(payload);
                return jsonarray;
            }
            return null;
        }
        
        //============== getJSONObject() ==========================
        JSONObject getJSONObject(String payload){
            Object json = new JSONTokener(payload).nextValue();
            System.out.println("===========================\ngetJSONArray payload: "+payload);
            System.out.println("===========================\ngetJSONArray json: "+json);
            if (json instanceof JSONObject) {
                JSONObject jsonobject = new JSONObject(payload);
                return jsonobject;
            }
            return null;
        }
        
        
        //==============[   MAIN   ]============================================
        
        try {
            String path = session.getRequestPath();
            String method = event.request.getMethod();
            UserRESTHelper backend = getBackend();
            try {
            
                //==============[ dispatch POSTs ]==============================
                if (method.equals("POST")){
                    String reqbody = event.getRequestBody();
                    String res = "";
                    if (path.equals("/anarchia/images")){
                        res = backend.post("anarchia",
                                 "images",
                                  reqbody);
                    } else if (path.equals("/anarchia/idservice")){
                        res = backend.post("anarchia",
                                 "idservice",
                                  reqbody);
                    } else if (path.equals("/anarchia/stories")){
                        res = backend.post("anarchia",
                                 "stories",
                                  reqbody);
                    }
                    event.returnSource(res, false, "application/json");
                    return;
                }
                
                //=========[ dispatch GETs (by default, no DELETEs yet...)  ]===
                String qtype = event.getQueryParam("qtype");
                if (qtype!=null&&qtype.length()>0){
                    String json = "";
                    String query = "";
                    String collection = event.getQueryParam("collection");
                    Tools.safe(collection);
                    
                    if (qtype.equals("version")){
                        json = "{\"version\":\"1\"}";
                        event.returnSource(json,
                                   false, 
                                   "application/json");
                        return;
                        
                    } else if (qtype.equals("idservice")){
                        query = "{'collection':'"+collection+"'}";  
                        json = backend.get("anarchia", "idservice", query);
                        
                    } else if (qtype.equals("nextid")){
                       json = ("{'nextid':'"+getIDBase(collection)+getNextID()+"'}").replace('\'', '"');
                       
                    } else if (qtype.equals("nextidnumber")){
                       json = ("{'nextid':'"+getNextID()+"'}").replace('\'', '"');
                       
                    } else if (qtype.equals("author")){
                        String author = event.getQueryParam("author");
                        Tools.safe(author);
                        //query = "{ $query: {'author':'"+author+"'}, $orderby: { sequence : 1 } }";  if you use this, no docs without sequence are returned.
                        query = "{ $query: {'author':'"+author+"'} }";
                        json = backend.getAll("anarchia", "images", query, 0, 1000);
                    
                    } else if (qtype.equals("story")){
                        String storyid = event.getQueryParam("storyid");
                        Tools.safe(storyid);
                        query = "{'id':'"+storyid+"'}";
                        json = backend.get("anarchia", "stories", query);
                        
                    } else if (qtype.equals("bystory")){
                        // THIS IS AN AGGREGATE FUNCTION: it does two queries.
                        // FIRST is to get the story by id, which has in it a list of panels.
                        String storyid = event.getQueryParam("storyid");
                        Tools.safe(storyid);
                        query = "{'id':'"+storyid+"'}";
                        json = backend.get("anarchia", "stories", query);
                        jsonobject = getJSONObject(json);
                        if (jsonobject==null){
                        event.returnSource("{\"error\":\"jsonobject was null\"}",
                                   false, 
                                   "application/json");
                            return;
                        }
                        //NOW hit mongo again with all the ids to retrieve the panels:
                        query = "{ id : { $in : "+jsonobject.get("panels").toString()+" } }";
                        json = backend.getAll("anarchia", "images", query);
                    } else if (qtype.equals("images")){
                        query = "{ id : { $in : ['http://anarchia.us/id/images/53', 'http://anarchia.us/id/images/54'] } }";
                        json = backend.getAll("anarchia", "images", query);
                    }
                    
                    System.out.println("GET("+query+"): "+json);
                    event.returnSource(json,
                                   false, 
                                   "application/json");
                    return;               
                } else {
                    //================[ dispatch gets to collections ]======
                    if (   path.equals("/anarchia")
                        || path.equals("/anarchia/")){
                        event.sendRedirect("/anarchia/panels.html");
                    }
                    String res = "[]";
                    if (path.equals("/anarchia/images")){
                        res = backend.getAll("anarchia",
                                 "images",
                                  "{}", 0, 1000);
                    } else if (path.equals("/anarchia/stories")){
                        res = backend.getAll("anarchia",
                                 "stories",
                                  "{}", 0, 1000);
                    }
                    event.returnSource(res, false, "application/json");
                    return;
                }
            } finally {
                backend.close();
            }
            return;
        } catch (Throwable t){
            event.returnSource(  "{\"error\":\""+t.toString()+"\"}",
                                       false, 
                                       "application/json");
        }
      	return;
  ]]></event>



  <pages>
  	<page name="jsonEditor"></page>
  </pages>
  <properties>
    <property name="applicationID">
      <value>us.anarchia</value>
    </property>
    <property name="defaultLanguage">
      <value>en-us</value>
    </property>
    <property name="onImport" isEvent="true">
      <datatype>com.dynamide.datatypes.ServerSideEvent</datatype>
      <value>application_onImport</value>
    </property>
    <property name="onAction" isEvent="true">
      <datatype>com.dynamide.datatypes.ServerSideEvent</datatype>
      <value></value>
    </property>
    <property name="poolable">
      <value>true</value>
    </property>
    <property name="title">
      <value>Anarchia Project</value>
    </property>
    <property name="type">
      <readOnly>true</readOnly>
      <value>com.dynamide.Session</value>
    </property>
  </properties>
</application>
